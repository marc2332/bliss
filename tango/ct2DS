#!/usr/bin/env python

"""
TANGO server for the CT2 (P201/C208) ESRF counter/timer card
"""

from __future__ import print_function
from __future__ import absolute_import


import sys
import logging
import argparse

import beacon.static

try:
    from bliss.controllers import ct2
except:
    import os
    this_dir = os.path.realpath(os.path.join(os.path.dirname(__file__), os.path.pardir, 'python'))
    sys.path.append(this_dir)
    from bliss.controllers import ct2


def get_config():
    return beacon.static.get_config()


def print_cards():
    config = get_config()
    for name in sorted(config.names_list):
        obj_cfg = config.get_config(name)
        klass = obj_cfg.get("class")
        if klass in ("C208", "P201"):
            desc = obj_cfg.get("description", "A {0} card".format(klass))
            print("{0} [{1} @ {2}] - {3}".format(name, klass,
                                                 obj_cfg.get("address"), desc))


def Server(args):
    from PyTango import GreenMode
    from PyTango.server import Server, run

    config = get_config()

    server = Server(server_type="ct2DS",
                    server_name=args.name,
                    green_mode=GreenMode.Gevent)

    cards = []
    for card_name in args.card:
        card = config.get(card_name)
        server.register_object(card, card_name)
        cards.append(card)

    return server


def main():
    #logging.basicConfig(level=logging.DEBUG)

    class ListAction(argparse.Action):
        def __init__(self, option_strings, dest=argparse.SUPPRESS,
                     default=argparse.SUPPRESS, help=None):
            super(ListAction, self).__init__(option_strings=option_strings,
                                             dest=dest, default=default,
                                             nargs=0, help=help)
        def __call__(self, parser, namespace, values, option_string=None):
            print_cards()
            parser.exit()

    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument('--log-level', type=str, default='info',
                        help='log level (debug, info, warning, error) [default: info]')
    parser.add_argument('--list', "-l", action=ListAction,
                        help='list existing cards in configuration and exit')
    parser.add_argument('--card', type=str, nargs="+",
                        help='list of cards to instantiate')
    parser.add_argument('name', type=str, help='server name')

    args = parser.parse_args()

    logging.basicConfig(level=getattr(logging, args.log_level.upper()),
                        format="%(asctime)s %(levelname)s %(name)s: %(message)s")

    server = Server(args)

    server.run()


if __name__ == "__main__":
    main()
