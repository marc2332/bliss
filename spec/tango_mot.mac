#%TITLE% tango_mot.mac

#%NAME%
#  tango_mot.mac

#%DESCRIPTION%
# tango_mot macros allow to configure a SPEC hardware macro-motor to be used to  %BR% \
# interface a tango motor device server. Mainly used with EMotion Tango          %BR% \
# motors.   %BR% \
#
#%EXAMPLE%
#%DL%
#%SETUP%
# Configuration is done in SPEC config (not in SPEC setup).%BR%
#
# --Controller------------------------------------------------------------------ %BR% \
# Motor and Counter Device Configuration (Not CAMAC)
#
# MOTORS\0\0\0DEVICE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0ADDR\0\0<>MODE\0\0NUM\0\0\0\0\0\0\0\0\0\0\0<>TYPE %BR% \
# \0\0\0YES\0\0\0tango_mot\0idXX/bliss/exp\0\0\0\0\0\0\0\0\0\0\0\01\0\0\0\0\0Macro\0Motors          %BR% \
# \0\0\0\0NO                                                                                          %BR% \
# ------------------------------------------------------------------------------ %BR% \
# %BR% \
# %BR% \
# --Axis------------------------------------------------------------------------ %BR% \
# Number:\0<>Controller\0\0\0\0\0\0\0\00:\0\0\0\0NONE\0\0\0\01:\0MAC_MOT                       %BR% \
# Unit/[Module/]Channel\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\00/0             %BR% \
# Name\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0unused\0\0\0\0\0\0\0\0\0\0\0fdc  %BR% \
# Mnemonic\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0unused\0\0\0\0\0\0\0\0\0\0\0fdc      %BR% \
# ------------------------------------------------------------------------------ %BR%
#
# Set the custom parameter "axis_name" to use a mnemonic different from tango    %BR% \
# axis name.
#
# Set "use_spec_config" to 1 to use spec configuration parameters rather than    %BR% \
# EMotion/tango ones.
#
# --Custom Parameters for Motor "ma" (ma)--------------------------------------- %BR% \
# NAME\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0VALUE                          %BR% \
# axis_name\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0roba                                %BR% \
# use_spec_config\0\0\0\0\0\0\0\0\0\0\01                                         %BR% \
# ------------------------------------------------------------------------------ %BR% \
#
#
#%END%

######################################################################
###########################  Macro motors  ###########################
######################################################################

need spec_utils
need hg

# Messages styles configuration.
hg_config_style("tango_mot",  1, 0, 3)
hg_config_indent("tango_mot", 0, 0, 0)
hg_config_headers("tango_mot", "TANGO_MOT", "TANGO_MOT", "TANGO_MOT")
hg_generate("tango_mot")

global EMOTION_COMP_FUNC[]


def bliss_get_axes(mot_name) '{
    local  TTT[]

    # Do not remove the following line...
    TTT[0] = TTT[0]

    tango_io(motor_par(mot_name, "ctrl_dev_name"), "GetAxisList", TTT)

    return TTT
}'


def bliss_get_custom_commands(mot_name) '{

    local ccList[]

    tango_io(motor_par(mot_name, "dev_name"), "GetCustomCommandList", ccList)

    for (ii in ccList) {
        local _fct_name  _cmd_string   _reste  _length
        local uuu[]   _tin  _tout

        _cmd_string = ccList[ii]

        # example :
        # ["custom_set_measured_noise", ["float", "None"]]

        _length = length(_cmd_string)
        _fct_name = substr(_cmd_string, 3, index(_cmd_string, ",")-4)
        # _fct_name = custom_set_measured_noise
        # print _fct_name

        _fct_length = index(_cmd_string, ",")+2
        _reste = substr(_cmd_string, _fct_length  , _length-_fct_length )
        # _reste = ["custom_set_measured_noise", ["float", "None"]]


        split(_reste, uuu, ", ")
        _tin = string_remove_last_N_chars(substr(uuu[0], 3), 1)
        _tout = string_remove_last_N_chars(substr(uuu[1], 2), 2)

        printf("%s(%s) --> %s \n", _fct_name, _tin, _tout)

        # Check for complementary functions
        if (_fct_name == "closed_loop"){
            EMOTION_COMP_FUNC["closed_loop"] = 1
        }
        else{
            # Not a complementary function => custom command.
            bliss_declare_func(_fct_name, _tin, _tout)
        }
    }
}'


def bliss_declare_func(fct_name, type_in, type_out) '{

    local _cmd

    if(type_in == "None" && type_out == "None"){
        _cmd = sprintf("rdef bliss_%s(mot_name) \\\'{     \n\
    tango_io(motor_par(mot_name, \"dev_name\"), \"%s\")                                  \n\
}\\\'       \
          ", fct_name, fct_name)

        eval(_cmd)
    }
    else if(type_out == "None"){
        _cmd = sprintf("rdef bliss_%s(mot_name, argin) \\\'{     \n\
    tango_io(motor_par(mot_name, \"dev_name\"), \"%s\", argin)                                  \n\
}\\\'       \
          ", fct_name, fct_name)

        eval(_cmd)
    }
    else if(type_in == "None"){
        _cmd = sprintf("rdef bliss_%s(mot_name) \\\'{     \n\
    return tango_io(motor_par(mot_name, \"dev_name\"), \"%s\")                                  \n\
}\\\'       \
          ", fct_name, fct_name)

        eval(_cmd)
    }
    else{
        _cmd = sprintf("rdef bliss_%s(mot_name, argin) \\\'{     \n\
    return tango_io(motor_par(mot_name, \"dev_name\"), \"%s\", argin)                                  \n \
}\\\'       \
          ", fct_name, fct_name)

        eval(_cmd)
    }
}'


#%UU% <motor_name> [<mode>]
#%MDESC%
#Launches atkpanel GUI on the device of motor <motor_name>. %BR% \
#Use expert mode if <mode> is "expert".
def econfig '{
    local _nb_param  _device_name  _axis_name

    _nb_param = $#

    _axis_name = "$1"
    _device_name = motor_par(_axis_name, "dev_name")

    if (_nb_param == 2 && ("$2" == "expert")){
        printf("Launching expert GUI for Bliss axis \"%s\" (device=\"%s\")\n", _axis_name,  _device_name)
        _cmd = sprintf("/users/blissadm/bin/atkpanel -expert %s  >/dev/null 2>&1 &", _device_name)
    }
    else{
        printf("Launching GUI for Bliss axis \"%s\" (device=\"%s\")\n", _axis_name,  _device_name)
        _cmd = sprintf("/users/blissadm/bin/atkpanel %s  >/dev/null 2>&1 & ", _device_name)
    }

    unix(_cmd)
}'


#%UU% <motor_name>
#%MDESC% \
#    Launches atkpanel GUI in expert mode on the device of motor
#<motor_name>.
def eeconfig '{
    econfig "$1" "expert"
}'


#%IU%
#%MDESC% \
#    Called on config/reconfig
def tango_mot_config(motnum, type, unit, module, channel) '{

    if((motnum == "..") && (type == "ctrl")) {

        # Checks controller DS field.
        if (tango_mot_ADDR ==""){
            tango_mot_err( "config : tango_mot_ADDR is empty ?")
            return ".error."
        }

        # Checks that Tango DS is running, however ds_is_reponsive provokes undesired
        # error messages, use ds_is_tango
        if(!ds_is_tango(tango_mot_ADDR)) {
            tango_mot_err(sprintf("%s unresponsive -> disabling motor controller.", \
                                  tango_mot_ADDR))
            return ".error."
        }
        else{
            tango_mot_dbg(sprintf("EMotion Controller %s is responding", tango_mot_ADDR))
        }
        return
    }

    if(type == "mot") {
        local _mot_mne  _ctrl_ds_name  _axis_ds_name  _axis_name
        local TTT[]  _msg
        local spec_bk emot_bk

        _mot_mne = motor_mne(motnum)

        # Builds axis DS name from controller DS name.
        # ex : id26/bliss/cyrtest -> id26/bliss_cyrtest/roba
        _ctrl_ds_name = tango_mot_ADDR
        tango_mot_dbg(sprintf("CTRL DS NAME = %s", _ctrl_ds_name))

        _axis_name = motor_par(motnum, "axis_name")

        if (_axis_name == 0){
            _axis_name = _mot_mne
            _msg = sprintf("motor %d : parameter \"axis_name\" is empty (will use mnemonic : %s).", \
                           motnum, _mot_mne )
            tango_mot_msg(_msg)
        }
        else{
            tango_mot_dbg(sprintf("axis_name in SPEC config = %s", _axis_name))
        }

        if (split(_ctrl_ds_name, TTT, "/") == 3){
            _axis_ds_name = sprintf("%s/%s_%s/%s", TTT[0], TTT[1], TTT[2], _axis_name)
            tango_mot_dbg(sprintf("AXIS DS NAME = %s", _axis_ds_name))
        }
        else{
            tango_mot_err(sprintf("wrong Tango DS name in ADDR field ?", tango_mot_ADDR ))
            return ".error."
        }

        # ds_is_reponsive provokes undesired error messages, use ds_is_tango
        if (!ds_is_tango(_axis_ds_name)){
            tango_mot_err(sprintf("Axis %s is not responding", _axis_ds_name))
            return ".error."
        }
        else{
            tango_mot_dbg(sprintf("Motor \"%s\" linked to Tango EMotion axis : %s ", \
                                  _mot_mne, _axis_ds_name))
        }

        # Registers axis Tango DS name in parameters of the motor.
        tango_mot_dbg(sprintf("Registering DS name : \"%s\" for motor \"%s\"", \
                             _axis_ds_name, _mot_mne))

        # Cannot use tango_mot_ADDR here directly...
        motor_par(motnum, "ctrl_dev_name", tango_mot_ADDR, "add")
        motor_par(motnum, "dev_name", _axis_ds_name, "add")

        # On a reconfig, restores config value of axis.
        motor_par(motnum, "apply_config")

        # Try to switch power on.
        TANGO_ERR = -1
        tango_io(_axis_ds_name, "On")
        if (TANGO_ERR){
            _tango_mot_error_stack(_mot_mne, _dev, _attr)
            exit
        }

        # Queries Bliss DS to know the state of the axis.
        local _state
        _state = tango_io(_axis_ds_name, "State")
        if (TANGO_ERR){
            _tango_mot_error_stack(_mot_mne, _dev, _attr)
            return ".error."
        }

        # Disables motor if not ready.
        if (_state != 0){
            _msg = sprintf("Motor %s is not ready, disabling it !!!", _mot_mne)
            tango_mot_err(_msg)
            motor_par(motnum ,"disable", 1)

            tango_mot_print_status(motnum)

            return ".error."
        }

        # STEPS PER UNIT
        # The step_size SPEC value is only used to define the
        # granularity of the movement. We do not use it to convert
        # movements.
        # Read _steps_per_unit from SPEC config to be able to deal
        # with spec units which are steps-oriented...
        local _steps_per_unit
        _steps_per_unit = motor_par(motnum, "step_size")

        # VELOCITY / ACCELERATION
        local _velo _velo_steps _use_spec_config
        local _acc_time _acc_time_ms

        # 2 modes for acceleration / velocity
        # use_spec_config = 0 (default) : values are read from DS and set to
        #                                 spec internals
        # use_spec_config = 1 : use values from spec config and write it to DS
        # use_spec_config can be added in optionnal motor parameters in config

        _use_spec_config = motor_par(motnum, "use_spec_config")
        tango_mot_dbg(sprintf("Use %s values for velocity/acceleration ", \
                              _use_spec_config?"SPEC":"SERVER"))

        if (_use_spec_config == 1) {
            # Writes SPEC config values to the server.

            tango_mot_msg(sprintf("Motor %s uses acc/velocity from spec config", _mot_mne))

            _velo_steps = motor_par(motnum, "velocity")
            tango_mot_dbg(sprintf("set velocity to : %g steps/s", _velo_steps))
            tango_mot_par(motnum, "velocity", "set", _velo_steps)

            _acc_time_ms = motor_par(motnum, "acceleration")
            tango_mot_dbg(sprintf("set acceleration to : %g ms", _acc_time_ms))
            tango_mot_par(motnum, "acceleration", "set", _acc_time_ms)

        }
        else {
            # We only need to set spec internals (no write to DS)

            tango_mot_dbg("----------------configuring SPEC from DS values---------------")

            # To inform macro func tango_mot_par to not set acc/velo
            # to DS we use this custom [in_config] motor_par flag
            motor_par(motnum, "in_config", 1, "add")

            # Reads "velocity" from server and set SPEC internal
            # "velocity" (different from "config_velocity").
            _velo = tango_mot_get_attr(motnum, "velocity")
            _velo_steps = _velo * _steps_per_unit
            tango_mot_dbg(sprintf("DS velocity=%g  SSS=%g _velo_steps=%g ", \
                                  _velo, _steps_per_unit, _velo_steps))
            motor_par(motnum, "velocity", _velo_steps)

            # Reads "acctime" from server and sets spec internal
            # "acceleration" value.
            _acc_time = tango_mot_get_attr(motnum, "acctime")
            _acc_time_ms = _acc_time * 1000
            tango_mot_dbg(sprintf("DS acc_time=%g  _acc_time_ms=%g ", _acc_time, _acc_time_ms))
            motor_par(motnum, "acceleration", _acc_time_ms)

            # Reset custom [in_config] flag, so motor_par set by user
            # works fine.
            motor_par(motnum, "in_config", 0)
        }

        # Handles the specific case of the backlash which can not be
        # set in EMotion from Spec. Therefore the flag use_spec_config
        # can not be used neither.
        spec_bk = motor_par(motnum, "backlash")
        emot_bk = tango_mot_get_attr(motnum, "backlash")
        if((emot_bk != 0) && (spec_bk != 0)) {
            _msg = sprintf("Motor %s has backlash in Spec AND in EMotion, disabling it!!!", _mot_mne)
            tango_mot_err(_msg)
            motor_par(motnum ,"disable", 1)
            return ".error."
        }
    }
}'


#%IU% (motnum, key, action, p1, p2)
#%MDESC% \
#    The hmacmot_par function is called when various motor parameters are set   %BR% \
# and when the motor_par() function is used to retrieve a user-defined          %BR% \
# parameter. \
#%DL% \
#%UL% \
#%LI%<motnum> : motor number     \
#%LI%<key>    : parameter name   \
#%LI%<action> : "set" / "get"    \
#%LI%<p1>     :    \
#%LI%<p2>     :    \
#%XUL%
def tango_mot_par(motnum, key, action, p1, p2) '{
    local _mot_mne
    local _msg
    local _axis_ds_name

    _mot_mne = motor_mne(motnum)


    # Returns the list of non standard motor parameters implemented.
    if ( key == "?" && action == "get") {
        return ("ZZZZZZ")
        # return("power, axisstatus, apply_config, settings_to_config, closed_loop")
    }


    if(key != "dev_name"){
        _axis_ds_name = motor_par(motnum, "dev_name")
    }

    # Control motor power
    if (key == "power") {
        local _state

        if (action == "set") {
            # Try to switch power on or off according to argin given
            TANGO_ERR = -1
            tango_io(_axis_ds_name, (p1==1 ? "On" : "Off"))
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _axis_ds_name, _attr)
                exit
            }
        }

        # In any case, returns the current state (0 == ON)
        _state = tango_io(_axis_ds_name, "State")
        return (_state == 0)
    }

    if (key == "apply_config") {

        TANGO_ERR = -1
        tango_io(_axis_ds_name, "ApplyConfig")
        if (TANGO_ERR){
            _tango_mot_error_stack(_mot_mne, _axis_ds_name, _attr)
            exit
        }

        # in any case, returns the current state (0 == ON)
        _state = tango_io(_axis_ds_name, "State")
        return (_state == 0)
    }

    if (key == "settings_to_config") {

        TANGO_ERR = -1
        tango_io(_axis_ds_name, "SettingsToConfig")
        if (TANGO_ERR){
            _tango_mot_error_stack(_mot_mne, _axis_ds_name, _attr)
            exit
        }

        # in any case, returns the current state (0 == ON)
        _state = tango_io(_axis_ds_name, "State")
        return (_state == 0)
    }

    if (key == "closed_loop"){

        local _cl_state

        if (action=="set"){
            print "oula"
        }

        _cl_state = tango_io(_axis_ds_name, "closed_loop")
        return (_cl_state)
    }


    if (action=="get") {
        if ( key == "axisstatus"){
            return (tango_mot_status(motnum))
        }
        else {
            #printf("dou tu sors toi ??? motnum=%d, key=%s, action=%s, p1=%s, p2=%s \n", \
            #       motnum, key, action, p1, p2)
        }
    }
    else if (action == "set"){

        if (key == "acceleration"){
            # Writes both Acceleration AND Acceleration time ...

            if (motor_par(motnum, "in_config") == 1) {
                tango_mot_dbg("set acc_time and acceleration : no write to DS while in_config")
                return
            }
            else{
                tango_mot_dbg("set SPEC acceleration (ms) to DS acceleration (uu/s2)")

                local _acc  _attr _acc_time  _acc_time_ms  _velocity

                # re-read "velocity" from DS
                _velocity = tango_mot_get_attr(motnum, "velocity")

                _attr =  "acceleration"
                _acc_time_ms  = p1
                _acc_time = _acc_time_ms / 1000

                if (_acc_time == 0){
                    tango_mot_err("_acc_time ==0")
                }
                else{
                    _acc = _velocity / _acc_time
                }

                # Writes "acceleration" in DS
                tango_mot_dbg(sprintf("_velocity=%g  _acc_time=%g  _acc=%g ", _velocity, _acc_time, _acc))
                tango_mot_set_attr(motnum, "acceleration", _acc)

                # Writes "acctime" in DS
                tango_mot_dbg("set SPEC acceleration (ms) to DS acc_time (s)")
                tango_mot_set_attr(motnum, "acctime", _acc_time)
            }
        }
        else if (key == "slew_rate" || key == "velocity") {

            if (motor_par(motnum, "in_config") == 1) {
                tango_mot_dbg("set velocity : no write to DS while in_config")
                return
            }
            else{

                tango_mot_dbg("set SPEC velocity (steps/s) to DS velocity (uu/s)")

                local _attr  _velocity_in_steps  _steps_per_unit  _velo

                _attr =  "velocity"
                _velocity_in_steps  = p1
                _steps_per_unit = motor_par(motnum, "step_size")

                if (_steps_per_unit == 0){
                    tango_mot_err("_steps_per_unit == 0")
                }
                else{
                    _velo = _velocity_in_steps / fabs(_steps_per_unit)
                }

                # Writes "velocity" into ds.
                tango_mot_dbg(sprintf("_velocity_in_steps=%g  _steps_per_unit=%g  _velo=%g", \
                                      _velocity_in_steps, _steps_per_unit, _velo))
                tango_mot_set_attr(motnum, "velocity", _velo)
            }
        }
    }
    else{
        tango_mot_dbg(sprintf ("tango_mot_par()--action \"%s\" is not recognized. (key=%s) ", action, key))
    }
}'


#%IU%
#%MDESC%
#    debug 128 can help here.
def tango_mot_cmd(motnum, cmd, p1, p2) '{

    local _mot_mne  _dev  _attr  _step_size  _steps  _cmd

    _mot_mne = motor_mne(motnum)


    if(motnum == ".."){
        # <cmd> command applying to all motors.
    }
    else{
        # <cmd> command applies to individual motor.

        _dev = motor_par(motnum, "dev_name")

        # "position" must return dial position in prefered units( ex :
        # deg, mm, um)
        # parameters: none
        if (cmd == "position") {
            local _pos

            _attr =  "position"
            _pos = tango_get(_dev, _attr)
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }

            _step_size = motor_par(motnum, "step_size")
            _steps = _pos * _step_size

            return (_pos)
        }

        # "get_status" called during the motion, must return a bit mask
        # bits meaning: 0 if motor idle
        #               2 if motor moving
        #               4 if negative limit on
        #               8 if positive limit on
        if (cmd == "get_status"){
            local _state  _ret  _cmd

            _ret = 0
            if(tango_mot_get_attr(motnum, "HardLimitHigh")) {
                _ret |= 8
            }
            if(tango_mot_get_attr(motnum, "HardLimitLow")) {
                _ret |= 4
            }

            _cmd = "State"
            _state = tango_io(_dev, _cmd)
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }


            # tango_state : -1   "FAULT"
            # tango_state : 0    "ON"
            # tango_state : 1    "OFF"
            # tango_state : 2    "CLOSED"  (or CLOSE?)
            # tango_state : 3    "OPEN"
            # tango_state : 4    "INSERT"
            # tango_state : 5    "EXTRACT"
            # tango_state : 6    "MOVING"
            # tango_state : 7    "STANDBY"
            # tango_state : 8    "FAULT"
            # tango_state : 9    "INIT"
            # tango_state : 10   "RUNNING"
            # tango_state : 11   "ALARM"
            # tango_state : 12   "DISABLED" (or DISABLE?)
            # tango_state : 13   "UNKNOWN"

            # MOVING
            if (_state == 6) {
                _ret |= 2
            }

            # FAULT
# ???       # PC: problem with SyncAxis, acceleration is wrong; causes Fault State while moving
# ???       # We do not care; this is anyway a provisional solution
#            if (_state == 8) {
#                _ret |= 2
#                return _ret
#            }

            return _ret
        }

        #-------------------------------------
        # "start_one"
        # parameters: p2 is relative motion, p1 is absolute requested position
        if (cmd == "start_one") {
            local _ret

            _attr = "position"
            TANGO_ERR = -1
            _ret = tango_put(_dev, _attr, p1)
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }

            # MP: the exception error stack is not returned by TANGO API
            # therefore print motor status instead. Anyway, this will be more
            # useful for the user than the stack itself.
            if(_ret) {
                local _msg

                _msg = sprintf("Unable to launch motion on motor %s", _mot_mne)
                tango_mot_err(_msg)
                tango_mot_print_status(motnum)
                #_tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }
        }

        #-------------------------------------
        # "set_position" called on "set_dial motor newpos"
        # parameters: p1 is the new position in user units
        #
        if (cmd == "set_position") {
            tango_mot_dbg(sprintf("new dial position in user units: %g", p1))
            tango_mot_set_attr(motnum, "presetposition", p1)
        }

        # "abort_one" called on <Ctrl-C>
        if (cmd == "abort_one") {
            _cmd = "Abort"
            tango_io(_dev, _cmd)

            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _cmd)
                exit
            }
        }
    }
}'


#%IU% (<motnum>)
#%MDESC%
#    Prettier print of status.
def tango_mot_print_status(motnum) '{
    local ii  TTT[]  UUU[]

    split(tango_mot_status(motnum), TTT, "\n")

    UUU = ass_arr_revrse(TTT)
    for (ii in UUU){
        tango_mot_msg(UUU[ii])
    }
}'


#%IU% (<motnum>)
#%MDESC%
#    Returns status string(s) for motor <motnum>
# Possibly many status -> many lines.
def tango_mot_status(motnum) '{
    local _status tt[] ii
    local _axis_ds_name
    local _mot_mne

    _mot_mne = motor_mne(motnum)
    _axis_ds_name = motor_par(motnum, "dev_name")
    _status = tango_io(_axis_ds_name, "Status")
    split(_status, tt, " | ")
    _msg = sprintf("Current motor %s status:\n", _mot_mne)

    for(ii in tt) {
        _msg = sprintf("%s\t%s\n", _msg, tt[ii])
    }

    return(_msg)
}'


######################################################################
#####################                            #####################
#####################   TANGO ATTRIBUTES ACCESS  #####################
#####################                            #####################
######################################################################

# Macros to read/write Tango attributes with tango errror management.

def tango_mot_get_attr(motnum, attr_name) '{
    local _attr_val _dev _mot_mne
    _dev = motor_par (motnum, "dev_name")
    _mot_mne = motor_mne(motnum)

    _attr_val = tango_get(_dev, attr_name)
    if (TANGO_ERR){
        _tango_mot_error_stack(_mot_mne, _dev, attr_name)
        exit
    }
    return _attr_val
}'

def tango_mot_set_attr(motnum, attr_name, attr_value) '{
    local _dev _mot_mne
    _dev = motor_par (motnum, "dev_name")
    _mot_mne = motor_mne(motnum)

    tango_put(_dev, attr_name, attr_value)
    if (TANGO_ERR){
        _tango_mot_error_stack(_mot_mne, _dev, attr_name)
        exit
    }
}'

def _tango_mot_error_stack(motmne, devname, attr_cmd) '{
    tty_cntl("md")
    print "\n TANGO_MOT_ERROR " motmne " " devname  "/"  attr_cmd
    printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
    print TANGO_ERR_STACK
    tty_cntl("me")
}'



#%MACROS%
#%IMACROS%
#%AUTHOR%  Cyril Guilloud - BLISS - 2014-2015

