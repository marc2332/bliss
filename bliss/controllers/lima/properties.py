# -*- coding: utf-8 -*-
#
# This file is part of the bliss project
#
# Copyright (c) 2015-2020 Beamline Control Unit, ESRF
# Distributed under the GNU LGPLv3. See LICENSE for more info.

import functools
import enum
import inspect
import re

from bliss.common.tango import DevFailed
from bliss.config.beacon_object import BeaconObject
from bliss.common.logtools import user_error

LimaProperty = type("LimaProperty", (property,), {})


def LimaBeaconObjectProperty(name, lima_get, lima_convert_to_write):
    def fget(self):
        try:
            return lima_get(self)
        except DevFailed as exc:
            user_error(f"reading lima property {name} ({exc.args[0].desc.strip()})")

    fget.__name__ = name

    def fset(self, value):
        v = lima_convert_to_write(self, value)
        return v

    fset.__name__ = name

    return BeaconObject._property(fget, fset)


def camel_to_snake(camelCasedStr):
    """ 
    This function converts to snake_case from camelCase
    """
    first_cap_re = re.compile(r"(.)([A-Z][a-z]+)")
    all_cap_re = re.compile(r"([a-z0-9])([A-Z])")
    sub1 = first_cap_re.sub(r"\1_\2", camelCasedStr)
    snake_cased_str = all_cap_re.sub(r"\1_\2", sub1).lower()
    return snake_cased_str.replace("__", "_")


class LimaAttrGetterSetter:
    def __init__(self, proxy, prefix=None):
        self.__proxy = proxy
        self.__prefix = prefix if prefix is not None else ""

    @property
    def prefix(self):
        return self.__prefix

    def _get_enum(self, values_enum):
        return values_enum

    def _r_attr_func(self, attr, values_enum=None):
        v = self.__proxy.read_attribute(attr).value
        if values_enum:
            assert v in values_enum.__members__.keys()
        return v

    def _w_attr_convert(self, value, attr, values_enum=None):
        if values_enum:
            if value in values_enum:
                v = value.value
            else:
                try:
                    v = values_enum[value].value
                except KeyError:
                    raise ValueError(
                        "'%s` only accepts following values: %s"
                        % (attr, ", ".join([x.name for x in list(values_enum)]))
                    )
        else:
            v = value
        return v

    def _w_attr_func(self, value, attr, values_enum=None):
        v = self._w_attr_convert(value, attr, values_enum)
        return self.__proxy.write_attribute(attr, v)

    def __info__(self):
        # only show Lima properties, ie. properties that are added
        # by the class generated by the LimaProperties function
        properties = inspect.getmembers(
            self.__class__,
            lambda x: isinstance(x, (LimaProperty, BeaconObject._property)),
        )
        display_list = []
        for pname, p in properties:
            try:
                v = p.fget(self)
            except DevFailed as exc:
                display_list.append(f"{pname} = ? ({exc.args[0].desc.strip()})")
            else:
                if v is None:
                    display_list.append(f"{pname} = ? (failed to read attribute)")
                else:
                    display_v = f"{v if isinstance(v, enum.Enum) else repr(v)}"
                    display_list.append(
                        f"{pname}: {display_v if p.fset else '|%s|' % display_v}"
                    )

        return "\n".join(display_list)


def LimaProperties(
    name,
    proxy,
    prefix=None,
    strip_prefix=False,
    base_class=None,
    base_class_args=None,
    base_class_kwargs=None,
):
    base_classes = [] if base_class is None else [base_class]
    base_classes.append(LimaAttrGetterSetter)
    klass = type(name, tuple(base_classes), {})
    attr_cfg_list = proxy.attribute_list_query()
    for attr_info in attr_cfg_list:
        attr = attr_info.name
        if attr in ("image_events_push_data", "image_events_max_rate", "last_image"):
            continue
        if prefix is None or attr.startswith(prefix):
            attr_username = camel_to_snake(
                attr if not strip_prefix or prefix is None else re.sub(prefix, "", attr)
            )
            if attr_username in dir(klass):
                # do not overwrite existing property/member
                continue
            values_enum = None
            if attr_info.data_format == 0 and attr_info.data_type == 8:
                # SCALAR, DevString
                try:
                    possible_values = proxy.getAttrStringValueList(attr)
                except AttributeError:
                    # 'getAttrStringValueList' is not present in Lima device
                    pass
                else:
                    if possible_values:
                        values_enum = enum.Enum(
                            attr_username + "_enum",
                            [(v.replace(" ", "_"), v) for v in possible_values],
                            type=str,
                        )
            r_attr_func = functools.partial(
                klass._r_attr_func, attr=attr, values_enum=values_enum
            )
            if attr_info.writable == 0:
                # read-only property
                setattr(klass, attr_username, LimaProperty(r_attr_func, None))
            else:
                if base_class and issubclass(base_class, BeaconObject):
                    w_attr_convert = functools.partial(
                        klass._w_attr_convert, attr=attr, values_enum=values_enum
                    )
                    setattr(
                        klass,
                        attr_username,
                        LimaBeaconObjectProperty(
                            attr_username, r_attr_func, w_attr_convert
                        ),
                    )
                else:
                    w_attr_func = functools.partial(
                        klass._w_attr_func, attr=attr, values_enum=values_enum
                    )
                    setattr(
                        klass, attr_username, LimaProperty(r_attr_func, w_attr_func)
                    )
            if values_enum is not None:
                setattr(
                    klass,
                    attr_username + "_enum",
                    property(
                        functools.partial(klass._get_enum, values_enum=values_enum)
                    ),
                )
    if base_class:
        if not base_class_args:
            base_class_args = []
        if not base_class_kwargs:
            base_class_kwargs = {}
        o = klass(*base_class_args, **base_class_kwargs)
        LimaAttrGetterSetter.__init__(o, proxy, prefix=prefix if strip_prefix else None)
        return o
    else:
        return klass(proxy, prefix=prefix if strip_prefix else None)
