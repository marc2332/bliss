#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the bliss project
#
# Copyright (c) 2016 Beamline Control Unit, ESRF
# Distributed under the GNU LGPLv3. See LICENSE for more info.

"""
Usage: bliss [(-c FILE |--config-file=FILE)] [(-s NAME | --session=NAME)]  
       bliss (-h | --help)

Options:

    -c FILE, --config-file=FILE  Full path to .yml configuration file.
    -s NAME, --session=NAME      Session name (from configuration file).
    -h, --help                   Show this screen.
"""
import sys
import os
import docopt
import functools
from ptpython import repl
from ptpython.eventloop import _create_eventloop
from gevent import select
from bliss.config import static
from bliss.shell import set_shell_config_file, read_config, setup

def gevent_inputhook(inputhook_context):
    r, _, _ = select.select([inputhook_context.fileno()],[],[])

def create_eventloop():
    return _create_eventloop(gevent_inputhook)

if __name__ == '__main__':
    try:
        # Parse arguments, use file docstring as a parameter definition
        arguments = docopt.docopt(__doc__)

        config_file = os.path.expanduser(arguments["--config-file"]) if arguments["--config-file"] else None
        session_name = arguments.get("--session")
    except docopt.DocoptExit as e:
        print e.message
    else:
        user_ns = { "config": static.get_config() }

        if config_file:
            set_shell_config_file(config_file)
       
            SETUP, SYNOPTIC, default_session = read_config()
            session_id = session_name or default_session 

            setup_file = SETUP.get(session_id, {}).get("file")
            config_objects_names = SETUP.get(session_id, {}).get("config_objects")

            repl.create_eventloop = create_eventloop
        
    	    user_ns.update({ "resetup": functools.partial(setup, env_dict=user_ns, config_objects_names_list=config_objects_names),
                             "SETUP_FILE": setup_file})
        
            user_ns['resetup']()

            history_filename = os.path.join(os.environ["HOME"], ".%s_%s_history" % (os.path.basename(sys.argv[0]), session_id))
        else:
            history_filename = os.path.join(os.environ["HOME"], ".%s_history" % os.path.basename(sys.argv[0]))

        repl.embed(user_ns, None, vi_mode=False, history_filename=history_filename)
