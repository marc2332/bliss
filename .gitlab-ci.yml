before_script:
  # set pip cache to the Docker volume
  - echo ${CI_PROJECT_DIR} 
  - export PIP_CACHE_DIR="/opt/cache/pip"
  - /opt/conda/bin/conda init && source /root/.bashrc
  - conda config --append channels conda-forge
  - conda config --add channels defaults
  - conda config --add channels http://bcu-ci.esrf.fr/stable 
  - conda config --add channels tango-controls

stages:
  - style
  - tests
  - build
  - package_tests
  - deploy

check_style:
  stage: style
  image: continuumio/miniconda3:latest
  before_script:
    - pip install -r requirements-dev.txt
  script:
    # run black
    - LC_ALL=C.UTF-8 black --check --safe .

check_lint:
  stage: style
  image: continuumio/miniconda3:latest
  before_script:
    - pip install -r requirements-dev.txt
  script:
    # run flake8 on diff between current branch and last common ancestor with master
    - git diff -U0 origin/master...$CI_COMMIT_SHA | flake8 --diff
  # allow failure without impacting the rest of the CI (will show an orange warning in the UI)
  allow_failure: true

.run_tests:source:
  stage: tests
  image: continuumio/miniconda3:latest
  script:
    # install Xvfb and opengl libraries (needed for test_flint)
    - apt-get update && apt-get -y install xvfb libxi6
    # create test env and install BLISS
    - conda create --quiet --name testenv --file requirements-conda.txt --file requirements-test-conda.txt
    - source activate testenv
    - pip install git+https://github.com/manahl/pytest-plugins#subdirectory=pytest-profiling
    - pip install .
    # run tests on source
    - python setup.py test --addopts "--cov bliss --cov-report html --cov-report term --profile --durations=30"
  after_script:
    - python scripts/profiling2txt.py
    - sh scripts/print_test_profiling.sh
  artifacts:
    paths:
      - htmlcov/
    expire_in: 7 days
  only:
    changes: # skip tests for doc changes
      - "bin/**/*"
      - "**/*.{py}"
      - "extensions/**/*"
      - "scripts/**/*"
      - "spec/**/*"
      - "tests/**/*"
      - ".gitlab-ci.yml"
      - "requirements*"
      - "setup.*"

run_tests:branch:
  extends: .run_tests:source
  only:
    refs:
      - branches
  except:
    refs:
      - merge_requests

run_tests:merge_request:
  extends: .run_tests:source
  only:
    refs:
      - merge_requests

package:
  stage: build
  image: continuumio/miniconda3:latest
  script:
    # create package env and install all requirements and conda-build, (gcc and g++ compiler required for flint)
    - conda create --quiet --name buildenv --file requirements-conda.txt --file requirements-test-conda.txt conda-build
    - source activate buildenv
    # create links to reach prefixed compilers of conda
    - ln -s /opt/conda/envs/buildenv/bin/x86_64-conda_cos6-linux-gnu-gcc /opt/conda/envs/buildenv/bin/gcc
    - ln -s /opt/conda/envs/buildenv/bin/x86_64-conda_cos6-linux-gnu-g++ /opt/conda/envs/buildenv/bin/g++
    # triggering the creation of bliss/release.py file
    - python -c "from setup import generate_release_file;generate_release_file()"
    # creating the meta.yaml file for conda packet generation
    - cd scripts
    - python create_recipe.py
    - conda build . --prefix-length=80  --output-folder=../dist/
    # creating a local conda channel to serve bliss packet for next stage
    - cd ..
    - mkdir conda-local-channel conda-local-channel/linux-64
    - cp -r dist/linux-64/*.tar.bz2 conda-local-channel/linux-64/
    - conda index conda-local-channel
  artifacts:
    paths:
      - dist/
      - conda-local-channel/
    expire_in: 7 days
  only:
    - tags

create_doc:reference:
  stage: build
  image: continuumio/miniconda3:latest
  script:
    # create doc env and install all requirements
    - conda create -q --yes --name docenv --file requirements-conda.txt --file requirements-doc-conda.txt
    - source activate docenv
    - pip install -r requirements-doc.txt
    # build of documentation
    - python setup.py build_sphinx
  artifacts:
    paths:
      - build/
    expire_in: 7 days

create_doc:user:
  stage: build
  image: continuumio/miniconda3:latest
  script:
    # create doc env and install all requirements
    - conda create -q --yes --name mkdocsenv --file requirements-conda.txt --file requirements-doc-conda.txt
    - source activate mkdocsenv
    - pip install -r requirements-doc.txt 
    # build of documentation
    - cd doc && mkdocs build
  artifacts:
    paths:
      - doc/site
    expire_in: 7 days

run_tests:package:
  stage: package_tests
  image: continuumio/miniconda3:latest
  script:
    # install Xvfb and opengl libraries (needed for test_flint)
    - apt-get update && apt-get -y install xvfb libxi6
    - mv bliss source # to avoid import errors (we want to test the packet, not local bliss folder)
    - conda create -y --name testenv
    - source activate testenv
    - conda install bliss==$CI_COMMIT_TAG --file requirements-test-conda.txt --channel file://${CI_PROJECT_DIR}/conda-local-channel
    - pytest --cov=bliss --cov-report html --cov-report term
  artifacts:
    paths:
      - htmlcov/
    expire_in: 7 days
  only:
    - tags

pages:
  stage: deploy
  before_script:
    - ''
  tags: 
    - conda
    - builder
    - linux
  script:
    # Publishing to intranet folders
    # if we have a tag it will be published under the intranet gitlab page under /tag/ otherwhise under /master/
    - if [[ ( $CI_COMMIT_REF_NAME == master && -z $CI_COMMIT_TAG ) ]]; then export DOC_DIR='master'; else export DOC_DIR=${CI_COMMIT_TAG}; fi
    #- rm -rf public/* # target dir should be cleaned at first time
    - rm -rf public/${DOC_DIR}
    - mkdir -p public/${DOC_DIR}/api/
    - mkdir -p public/${DOC_DIR}/htmlcov/
    - cp -rT doc/site public/${DOC_DIR}/
    - cp -rT build/sphinx/html public/${DOC_DIR}/api/
    - 'cp -rT htmlcov public/${DOC_DIR}/htmlcov/ || :'
  artifacts:
    paths:
      - public
    expire_in: 7 days
  only:
    - tags
    - master
  
deploy_bliss:
  stage: deploy
  before_script:
    - ''
  tags: 
    - conda
    - builder
    - linux
  script:
    # for tags with 'rc' the package will be published to http://bcu-ci.esrf.fr/stable/
    # for other tags the package will be published to http://bcu-ci.esrf.fr/stable/
    - if [[ $COMMIT_TAG == *rc* ]]; then export BASEDIR='/conda-devel'; else export BASEDIR='/conda'; fi
    - cp -r dist/linux-64/*.tar.bz2 ${BASEDIR}/linux-64/
    # Updating conda package index metadata
    - conda index ${BASEDIR}
  only:
    - tags
