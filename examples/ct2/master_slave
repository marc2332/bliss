#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the bliss project
#
# Copyright (c) 2015-2019 Beamline Control Unit, ESRF
# Distributed under the GNU LGPLv3. See LICENSE for more info.

"""
Example showing how to use two CT2 cards.
The *master* card is configured in *internal trigger multi* mode.
The *slave* card is configured in *external gate* mode.

It requires two CT2 cards configured in bliss.

You will have to connect the *master* card output channel (default: output
channel defined in the card static configuration) to the *slave* card input
channel (default: input channel defined in the card static configuration).
"""

import time
import logging
import argparse
import contextlib

from gevent import sleep, spawn
from gevent.event import Event

from bliss.common.event import dispatcher
from bliss.config.static import get_config
from bliss.controllers.ct2.device import AcqMode, AcqStatus, StatusSignal


parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument(
    "--log-level",
    default="INFO",
    choices=["CRITICAL", "ERROR", "WARNING", "INFO", "DEBUG"],
    help="log level",
    type=lambda c: c.upper(),
)
parser.add_argument("master_card_name", help="bliss configuration name of the CT2 card")
parser.add_argument(
    "slave_card_name", help="bliss configuration name of the slave CT2 card"
)
parser.add_argument(
    "expo_time", default=1.0, type=float, help="exposure time [default: %(default)s]"
)
parser.add_argument(
    "point_period", default=1.1, type=float, help="point period [default: %(default)s]"
)
parser.add_argument(
    "nb_points",
    default=1,
    type=int,
    help="number of acquisition points [default: %(default)s]",
)
parser.add_argument(
    "--master_output_channel",
    default=None,
    type=int,
    help="master CT2 output channel [default: %(default)s, meaning "
    "use the output channel defined in the static configuration]",
)
parser.add_argument(
    "--slave_input_channel",
    default=None,
    type=int,
    help="slave CT2 input channel [default: %(default)s, meaning "
    "use the input channel defined in the static configuration]",
)


args = parser.parse_args()

logging.basicConfig(
    format="%(levelname)s %(asctime)-15s %(name)s: %(message)s",
    level=getattr(logging, args.log_level),
)

if args.point_period <= args.expo_time:
    parser.error("point_period must be bigger than expo_time")

config = get_config()

master_device = config.get(args.master_card_name)
slave_device = config.get(args.slave_card_name)

with contextlib.closing(master_device), contextlib.closing(slave_device):
    master_device.acq_mode = AcqMode.IntTrigMulti
    master_device.acq_expo_time = args.expo_time
    master_device.acq_point_period = None
    master_device.acq_nb_points = args.nb_points
    master_device.acq_channels = 1, 2, 3
    if args.master_output_channel is not None:
        master_device.output_channel = args.master_output_channel

    slave_device.acq_mode = AcqMode.ExtGate
    slave_device.acq_expo_time = None
    slave_device.acq_point_period = None
    slave_device.acq_nb_points = args.nb_points
    slave_device.acq_channels = 2, 3, 4
    if args.slave_input_channel is not None:
        slave_device.input_channel = args.slave_input_channel

    master_finish_event = Event()
    slave_finish_event = Event()

    last_master = time.time()

    def on_master_card_event(value, signal, sender):
        global last_master
        curr = time.time()
        dt = curr - last_master
        last_master = curr
        logging.info(
            "Event from=%s signal=%s value=%s elapsed=%s",
            sender.name,
            signal,
            value,
            dt,
        )
        if signal == StatusSignal and value == AcqStatus.Ready:
            master_finish_event.set()

    last_slave = time.time()

    def on_slave_card_event(value, signal, sender):
        global last_slave
        curr = time.time()
        dt = curr - last_slave
        last_slave = curr
        logging.info(
            "Event from=%s signal=%s value=%s elapsed=%s",
            sender.name,
            signal,
            value,
            dt,
        )
        if signal == StatusSignal and value == AcqStatus.Ready:
            slave_finish_event.set()

    def triggers(n, period):
        # need n-1 triggers
        logging.info("Start trigger loop")
        start = time.time()
        i = 0
        while i < n:
            sleep((start + (i + 1) * period) - time.time())
            logging.info("Triggering...")
            master_device.trigger_point()
            i += 1
        logging.info("finished triggering")

    dispatcher.connect(on_master_card_event, sender=master_device)
    dispatcher.connect(on_slave_card_event, sender=slave_device)

    slave_device.prepare_acq()
    master_device.prepare_acq()
    slave_device.start_acq()
    start = time.time()
    trigger_task = spawn(triggers, args.nb_points - 1, args.point_period)
    master_device.start_acq()

    try:
        master_finish_event.wait()
        slave_finish_event.wait()
    except KeyboardInterrupt:
        master_device.stop_acq()
        slave_device.stop_acq()

    end = time.time()
    logging.info("Finished! Took %fs" % (end - start))

    master_data = master_device.get_data()
    m_cols, m_points = master_data.shape
    slave_data = slave_device.get_data()
    s_cols, s_points = slave_data.shape
    m_channels = ", ".join(map(str, master_device.acq_channels))
    s_channels = ", ".join(map(str, slave_device.acq_channels))
    logging.info(
        "Master card %r has %d point(s) of [%s, time, point_nb]",
        master_device.name,
        m_cols,
        m_channels,
    )
    logging.info(
        "Slave card %r has %d point(s) of [%s, time, point_nb]",
        slave_device.name,
        s_cols,
        s_channels,
    )
