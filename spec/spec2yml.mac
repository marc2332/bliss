
def spec2yml '{
    local  ii

    local _ctrl _device_id  _name  _module _chan _host _address
    local _velocity _acceleration _backlash _high_limit _low_limit
    local _steps_per_unit _enc_steps_per_unit _slop

    local ALREADY_SEEN[]

    local ctrl_name

    for(ii=0 ; ii< MOTORS ; ii++){
        _device_id       = motor_par(ii, "device_id")   # "tango_mot"  / "PSEUDO" / "icepap"

        if (_device_id == "icepap") {
	    _ctrl            = motor_par(ii, "controller")  # "PSE_MAC_MOT"
            _name            = motor_mne(ii)
            _steps_per_unit  = motor_par(ii, "config_step_size") * motor_par(ii, "sign")  # 15000 (=steps per unit)
            _enc_steps_per_unit  = motor_par(ii, "encoder_step_size")
            _slop =  fabs(motor_par(ii, "slop") / _steps_per_unit)

            _velocity        = fabs(motor_par(ii, "config_velocity") / _steps_per_unit)
            _acceleration    = _velocity / (motor_par(ii, "config_acceleration") / 1000)
            _high_limit      = get_lim(ii, +1)
            _low_limit       = get_lim(ii, -1)
            (_steps_per_unit < 0) ? (sign = -1): (sign = 1)
            _backlash        = sign* motor_par(ii, "config_backlash") / _steps_per_unit
            _module          = motor_par(ii, "module")
            _chan            = motor_par(ii, "channel")
            _host            = motor_par(ii, "address")    # iceid42
            _address         = motor_par(ii, "module")*10 + motor_par(ii, "channel")

            ctrl_name = sprintf("%s_%s.yml", SPEC, _host)
            printf("%3d : %10s addr=%2s velocity=%g ---> %s\n", ii, _name, _address, _velocity, ctrl_name)

            # dumps axis config in good file (file name depends on controller)
            open(ctrl_name)

            if (!ALREADY_SEEN[_host]) {
                printf ("never seen  %s\n", _host)
                fprintf(ctrl_name, "-\n")
                fprintf(ctrl_name, "  controller:\n")
                fprintf(ctrl_name, "    class: IcePAP\n")
                fprintf(ctrl_name, "    host: %s\n", _host)
                fprintf(ctrl_name, "    axes:\n")
                ALREADY_SEEN[_host] = 1
            }

            fprintf(ctrl_name, "        -\n")
            fprintf(ctrl_name, "            name: %s\n", _name)
            if (_enc_steps_per_unit != 0)
              fprintf(ctrl_name, "            encoder: %s_enc\n", _name)
            fprintf(ctrl_name, "            address: %2d\n", _address)
            fprintf(ctrl_name, "            steps_per_unit: %g\n", _steps_per_unit)
            fprintf(ctrl_name, "            velocity: %g\n", _velocity)
            fprintf(ctrl_name, "            acceleration: %g\n", _acceleration)
	    if (_backlash != 0)
              fprintf(ctrl_name, "            backlash: %g\n", _backlash)
            if (!_enc_steps_per_unit &&_slop > 0)
              fprintf(ctrl_name, "            tolerance: %g\n", _slop)

            close(ctrl_name)
        }
    }

    local ALREADY_SEEN[]

    for(ii=0 ; ii< MOTORS ; ii++){
        _device_id       = motor_par(ii, "device_id")   # "tango_mot"  / "PSEUDO" / "icepap"

        if (_device_id == "icepap") {
	    _enc_steps_per_unit  = motor_par(ii, "encoder_step_size")
            if (_enc_steps_per_unit != 0) {
              _name            = motor_mne(ii)
	      _steps_per_unit  = motor_par(ii, "config_step_size")
              _slop =  fabs(motor_par(ii, "slop") / _steps_per_unit)
              _host            = motor_par(ii, "address")    # iceid42

              printf("%3d : %10s enc_steps=%2g tolerance=%g\n", ii, _name, _enc_steps_per_unit,_slop)

              #  dumps axis config in good file (file name depends on controller)
	      ctrl_name = sprintf("%s_%s.yml", SPEC, _host)
              open(ctrl_name)

              if (!ALREADY_SEEN[_host]) {
                 printf ("never seen  %s\n", _host)
                 fprintf(ctrl_name, "\n    encoders:\n")
                 ALREADY_SEEN[_host] = 1
              }

              fprintf(ctrl_name, "        -\n")
              fprintf(ctrl_name, "            name: %s_enc\n", _name)
              fprintf(ctrl_name, "            steps_per_unit: %g\n", _enc_steps_per_unit)
              if (_slop > 0)
                fprintf(ctrl_name, "            tolerance: %g\n", _slop)
              close(ctrl_name)
            }
        }
    }
}'

def spec2yml_maxe() '{
    local  ii

    local _nethost
    local _ctrl _device_id  _name  _module _chan _host _address
    local _velocity _acceleration _backlash _high_limit _low_limit
    local _steps_per_unit _enc_steps_per_unit _slop

    local ALREADY_SEEN[]

    local ctrl_name

    unix("echo $NETHOST", _nethost)
    _nethost = substr(_nethost, 0, (length(_nethost)-1))

    for (ii = 0; ii < MOTORS ; ii++) {
      _ctrl    = motor_par(ii, "controller")  # "MAXE", "MAXE_E"
      _device_id       = motor_par(ii, "device_id") #taco device name


      if (index(_ctrl, "MAXE") != 0) {
        _name               = motor_mne(ii)
        _steps_per_unit     = motor_par(ii, "config_step_size") * motor_par(ii, "sign")  # 15000 (=steps per unit)
        _enc_steps_per_unit = motor_par(ii, "encoder_step_size")
        _slop               = fabs(motor_par(ii, "slop") / _steps_per_unit)
        _velocity           = fabs(motor_par(ii, "config_velocity") / _steps_per_unit)
        _acceleration       = _velocity / (motor_par(ii, "config_acceleration") / 1000)
        _high_limit         = get_lim(ii, +1)
        _low_limit          = get_lim(ii, -1)

        (_steps_per_unit < 0) ? (sign = -1): (sign = 1)
        _backlash        = sign* motor_par(ii, "config_backlash") / _steps_per_unit

        _chan            = motor_par(ii, "channel")
        _unit            = motor_par(ii, "unit")

        ctrl_name = sprintf("%s_%d.yml", SPEC, _unit)
        open(ctrl_name)

        if (!ALREADY_SEEN[_device_id]) {
          printf ("never seen  %s\n", _host)
          fprintf(ctrl_name, "-\n")
          fprintf(ctrl_name, "  controller:\n")
          fprintf(ctrl_name, "    class: TacoMaxe\n")
          fprintf(ctrl_name, "    tacodevice: //%s/%s\n", _nethost, _device_id)
          fprintf(ctrl_name, "    axes:\n")
          ALREADY_SEEN[_device_id] = 1
        }

        fprintf(ctrl_name, "        -\n")
        fprintf(ctrl_name, "            name: %s\n", _name)
        if (_enc_steps_per_unit != 0)
          fprintf(ctrl_name, "            encoder: %s_enc\n", _name)
        fprintf(ctrl_name, "            channel: %2d\n", _chan)
        fprintf(ctrl_name, "            steps_per_unit: %g\n", _steps_per_unit)
        fprintf(ctrl_name, "            velocity: %g\n", _velocity)
        fprintf(ctrl_name, "            acceleration: %g\n", _acceleration)
        if (_backlash != 0)
          fprintf(ctrl_name, "            backlash: %g\n", _backlash)
        if (!_enc_steps_per_unit &&_slop > 0)
          fprintf(ctrl_name, "            tolerance: %g\n", _slop)

        close(ctrl_name)
      }
    }

    local ALREADY_SEEN[]

    for (ii = 0; ii < MOTORS ; ii++) {
      _ctrl    = motor_par(ii, "controller")  # "MAXE", "MAXE_E"
      _device_id       = motor_par(ii, "device_id") #taco device name


      if (index(_ctrl, "MAXE") != 0) {
        _enc_steps_per_unit = motor_par(ii, "encoder_step_size")

        if (_enc_steps_per_unit != 0) {
          _name               = motor_mne(ii)
          _steps_per_unit     = motor_par(ii, "config_step_size") * motor_par(ii, "sign")  # 15000 (=steps per unit)
          _slop               = fabs(motor_par(ii, "slop") / _steps_per_unit)
          _unit            = motor_par(ii, "unit")

          ctrl_name = sprintf("%s_%d.yml", SPEC, _unit)
          open(ctrl_name)

          if (!ALREADY_SEEN[_device_id]) {
            printf ("never seen  %s\n", _host)
            fprintf(ctrl_name, "\n    encoders:\n")
            ALREADY_SEEN[_device_id] = 1
          }

          fprintf(ctrl_name, "        -\n")
          fprintf(ctrl_name, "            name: %s_enc\n", _name)
          fprintf(ctrl_name, "            steps_per_unit: %g\n", _enc_steps_per_unit)
          if (_slop > 0)
            fprintf(ctrl_name, "            tolerance: %g\n", _slop)

          close(ctrl_name)
        }
      }
    }
}'
