def ct2_config(cnum, type, unit, module, chan) '{
    local mne factor ctrl_dev

    global CT2_MAC_HDW[]

    ctrl_dev = ct2_ADDR
    if (type == "ctrl") {
        printf("Using P201 \"%s\" counters\n", ctrl_dev)
        return
    }

    mne = cnt_mne(cnum)
    if (chan == 0) {
        printf("Configuring \"%s\" as timer\n", mne)
        factor = counter_par(cnum, "scale")
        tango_put(ctrl_dev, "timer_freq", factor)
        tango_put(ctrl_dev, "acq_mode", "IntTrigReadout")
        CT2_MAC_HDW[ctrl_dev]["int_cnt"] = 11
    } else {
        counter_par(cnum, "counter_idx", "add")
    }
}'

def ct2_cmd(cnum, key, p1, p2) '{
    local chan is_running ctrl_dev acq_chan acq_chan_list[] sep val[] int_cnt
    local cnt_idx cnt_i

    global CT2_MAC_HDW_LAST[]

    ctrl_dev = ct2_ADDR
    if (cnum != "..")
        chan = counter_par(cnum, "channel")

    if (key == "get_status") {
        is_running = (tango_get(ctrl_dev, "acq_status") == "Running")
        CT2_MAC_HDW[ctrl_dev]["running"] = is_running
        return is_running
    } else if (key == "prestart_all") {
        CT2_MAC_HDW[ctrl_dev]["acq_channels"] = ""
        CT2_MAC_HDW[ctrl_dev]["nb_channels"] = 0
        CT2_MAC_HDW_LAST["valid"] = 0
    } else if (key == "start_one") {
        if (chan != 0) {
            acq_chan = CT2_MAC_HDW[ctrl_dev]["acq_channels"]
            sep = length(acq_chan) ? " " : ""
            acq_chan = sprintf("%s%s%d", acq_chan, sep, chan)
            CT2_MAC_HDW[ctrl_dev]["acq_channels"] = acq_chan
            cnt_idx = CT2_MAC_HDW[ctrl_dev]["nb_channels"]++
            counter_par(cnum, "counter_idx", cnt_idx)          
        } else {
            tango_put(ctrl_dev, "acq_expo_time", p1)
            split(CT2_MAC_HDW[ctrl_dev]["acq_channels"], acq_chan_list)
            tango_put(ctrl_dev, "acq_channels", acq_chan_list)
            tango_put(ctrl_dev, "acq_nb_points", 1)
            tango_io(ctrl_dev, "prepare_acq")
            tango_io(ctrl_dev, "start_acq")
        }
    } else if (key == "counts") {
        if (!CT2_MAC_HDW_LAST["valid"]) {
            tango_get(ctrl_dev, "counters", val)
            int_cnt = CT2_MAC_HDW[ctrl_dev]["int_cnt"]
            if (val[int_cnt - 1] != 0) {
                cnt_idx = (chan ? chan : int_cnt) - 1
                return val[cnt_idx]
            }

            TANGO_ERR = -1
            tango_get(ctrl_dev, "data", val)
            if (TANGO_ERR != "0")
                return -1
            for (cnt_i in val) 
                CT2_MAC_HDW_LAST[cnt_i] = val[cnt_i]
            CT2_MAC_HDW_LAST["valid"] = 1
        }
        if (chan)
            cnt_idx = counter_par(cnum, "counter_idx")
        else
            cnt_idx = CT2_MAC_HDW[ctrl_dev]["nb_channels"]
        return CT2_MAC_HDW_LAST[cnt_idx]
    } else if (key == "halt_all") {
        tango_io(ctrl_dev, "stop_acq")
    }
}'

def ct2_par(cnum, key, action, val) '{
    local ctrl_dev mode_str acq_mode acq_mode_table[]

    acq_mode_table[0] = "Internal"
    acq_mode_table[1] = "Slave"
    acq_mode_table["nr"] = 2

    ctrl_dev = ct2_ADDR
    if (key == "acq_mode") {
        mode_str = tango_get(ctrl_dev, "acq_mode")
        for (acq_mode = 0; acq_mode < acq_mode_table["nr"]; acq_mode++)
            if (acq_mode_table[acq_mode] == mode_str)
                break
        if (action == "set")
            tango_put(ctrl_dev, "acq_mode", acq_mode_table[val])
        return acq_mode
    } else if (key == "trigger_point") {
        tango_io(ctrl_dev, "trigger_point")
        return 0
    }
}'
