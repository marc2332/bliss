# Workflow determines rules for the entire pipeline
# here pipeline runs for TAG and BRANCHES, but not merge requests
# (i.e. we want to avoid detached pipelines for merge requests, MR will show branch pipeline status)
# ('rules' usage below would have lead to detached pipelines for MR)
workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_MERGE_REQUEST_ID

default:
  before_script:
    # /dev/random is super slow
    # https://www.tango-controls.org/community/forum/c/platforms/gnu-linux/device-server-gets-stuck-then-works-as-expected/
    # https://stackoverflow.com/questions/26021181/not-enough-entropy-to-support-dev-random-in-docker-containers-running-in-boot2d
    - rm /dev/random
    - ln -s /dev/urandom /dev/random
    # set pip cache to the Docker volume
    - echo ${CI_PROJECT_DIR}
    - export PIP_CACHE_DIR="/opt/cache/pip"
    - /opt/conda/bin/conda init && source /root/.bashrc
    - conda config --append channels conda-forge
    - conda config --add channels defaults
    - conda config --add channels esrf-bcu
    - conda config --add channels tango-controls

stages:
  - style
  - tests
  - build
  - package_tests
  - deploy

check_style:
  stage: style
  image: continuumio/miniconda3:latest
  script:
    - pip install -r requirements-dev.txt
    # run black
    - LC_ALL=C.UTF-8 black --check --safe .

check_lint:
  stage: style
  image: continuumio/miniconda3:latest
  script:
    - pip install -r requirements-dev.txt
    # run flake8 on diff between current branch and last common ancestor with master
    - git diff -U0 origin/master...$CI_COMMIT_SHA | flake8 --diff
  # allow failure without impacting the rest of the CI (will show an orange warning in the UI)
  allow_failure: true

.template_test_source:
  stage: tests
  image: continuumio/miniconda3:latest
  script:
    - echo ${CHANGES}
    - >
      if [ $CI_COMMIT_REF_NAME != 'master' ]; then
        # Check for changes manually to circumvent gitlab-ci limitation (issue #1115)
        echo 'Looking for changes...'
        if ! (git diff --name-only origin/master...$CI_COMMIT_SHA | grep -E "$CHANGES"); then
          echo 'Nothing to do'
          exit 0
        fi
      fi
    # install Xvfb and opengl libraries (needed for test_flint)
    - apt-get update && apt-get -y install xvfb libxi6
    # create test env and install BLISS
    - conda create --quiet --name testenv --file requirements-conda.txt --file requirements-test-conda.txt
    - source activate testenv
    - conda install pytest-profiling --yes
    - pip install . --no-deps
    # run tests on source
    - echo ${PYTEST_ARGS}
    - if [ -z $PYTEST_ARGS ]; then python setup.py test; else python setup.py test --addopts "$PYTEST_ARGS";fi
  variables:
    CHANGES: '\.(py|cfg)$|requirements|gitlab-ci|^(bin|extensions|scripts|spec|tests)/'

test_bliss:
  # Run bliss tests without coverage for any branches except the master
  extends: .template_test_source
  except:
    - master
  variables:
    PYTEST_ARGS: ''

test_writer:
  # Run hdf5 writer tests without coverage for any branches except the master
  extends: .template_test_source
  except:
    - master
  variables:
    PYTEST_ARGS: '-m writer --runwritertests'

test_bliss_cov:
  # Run bliss tests with coverage for master only
  extends: .template_test_source
  only:
    - master
  tags:
    - bliss_master
  artifacts:
    paths:
      - htmlcov/
    expire_in: 7 days
  after_script:
    - python scripts/profiling2txt.py
    - sh scripts/print_test_profiling.sh
  variables:
    PYTEST_ARGS: ''

test_writer_cov:
  # Run hdf5 writer tests with coverage for master only
  extends: .template_test_source
  only:
    - master
  tags:
    - bliss_master
  artifacts:
    paths:
      - htmlcov_writer/
    expire_in: 7 days
  after_script:
    - python scripts/profiling2txt.py
    - sh scripts/print_test_profiling.sh
  variables:
    PYTEST_ARGS: '-m writer --runwritertests'

# Tests for windows are disabled for the moment (job begin with .)
# (they cannot run currently because of (at least) redis version for win64 is limited to v3.2.100)
.test_bliss_windows:
  stage: tests
  image: continuumio/miniconda3:latest
  tags:
    - conda
    - win
  before_script:
    - call conda config --append channels conda-forge
    - call conda config --add channels defaults
    - call conda config --add channels esrf-bcu
    - call conda config --add channels tango-controls
  script:
    - call conda create --quiet --name testenv --file requirements-conda-win64.txt --file requirements-test-conda-win64.txt
    - call conda activate testenv
    - call pip install . --no-deps
    - call python setup.py test --addopts "-x --durations=30"

package:
  stage: build
  image: continuumio/miniconda3:latest
  tags:
    - conda
    - linux
  script:
    # install opengl libraries (needed to avoid problem with pyopengl dependency)
    - apt-get update && apt-get -y install libgl1-mesa-glx
    # create package env and install all requirements and conda-build, (gcc and g++ compiler required for flint)
    - conda create --quiet --name buildenv --file requirements-conda.txt --file requirements-test-conda.txt conda-build
    - source activate buildenv
    # create links to reach prefixed compilers of conda
    - ln -s /opt/conda/envs/buildenv/bin/x86_64-conda_cos6-linux-gnu-gcc /opt/conda/envs/buildenv/bin/gcc
    - ln -s /opt/conda/envs/buildenv/bin/x86_64-conda_cos6-linux-gnu-g++ /opt/conda/envs/buildenv/bin/g++
    # triggering the creation of bliss/release.py file
    - python -c "from setup import generate_release_file;generate_release_file()"
    # creating the meta.yaml file for conda packet generation
    - cd scripts
    - python create_recipe.py
    - conda build . --prefix-length=80  --output-folder=../dist/
    # creating a local conda channel to serve bliss packet for next stage
    - cd ..
    - mkdir conda-local-channel conda-local-channel/linux-64
    - cp -r dist/linux-64/*.tar.bz2 conda-local-channel/linux-64/
    - conda index conda-local-channel
  artifacts:
    paths:
      - dist/
      - conda-local-channel/
    expire_in: 7 days
  only:
    - tags

package_windows:
  stage: build
  image: continuumio/miniconda3:latest
  tags:
    - conda
    - win
  before_script:
    - call conda config --append channels conda-forge
    - call conda config --append channels http://bcu-ci.esrf.fr/stable
    - call conda config --add channels defaults
    - call conda config --add channels esrf-bcu
    - call conda config --add channels tango-controls
    - call conda config --show channels
    # - call conda config --remove channels http://bcu-ci.esrf.fr/stable
  script: 
    # create package env and install all requirements and conda-build
    # note: no need to install whole requirements.txt here (probably for linux either)
    - call conda create --yes --quiet --name buildenv python=3.7 conda-build lz4-c -c conda-forge
    - call conda activate buildenv
    # triggering the creation of bliss/release.py file
    - python -c "from setup import generate_release_file;generate_release_file()"
    # creating the meta.yaml file for conda packet generation
    - cd scripts
    - python create_recipe.py
    - call conda build . --prefix-length=80  --output-folder=../dist/
    # creating a local conda channel to serve bliss packet for next stage
    - cd ..
    - mkdir conda-local-channel conda-local-channel\win-64
    - copy dist\win-64\*.tar.bz2 conda-local-channel\win-64\
    - call conda index conda-local-channel
  artifacts:
    paths:
      - dist/
      - conda-local-channel/
    expire_in: 7 days
  only:
    - tags

create_reference_doc:
  stage: build
  image: continuumio/miniconda3:latest
  script:
    # install opengl libraries (needed to avoid problem with pyopengl dependency)
    - apt-get update && apt-get -y install libgl1-mesa-glx
    # create doc env and install all requirements
    - conda create -q --yes --name docenv --file requirements-conda.txt --file requirements-doc-conda.txt
    - source activate docenv
    - pip install -r requirements-doc.txt
    # build of documentation
    - python setup.py build_sphinx
  artifacts:
    paths:
      - build/
    expire_in: 7 days
  needs: []  # this job has no dependency, will start without waiting for previous stages to complete

create_user_doc:
  stage: build
  image: continuumio/miniconda3:latest
  script:
    # install opengl libraries (needed to avoid problem with pyopengl dependency)
    - apt-get update && apt-get -y install libgl1-mesa-glx
    # create doc env and install all requirements
    - conda create -q --yes --name mkdocsenv --file requirements-conda.txt --file requirements-doc-conda.txt
    - source activate mkdocsenv
    - pip install -r requirements-doc.txt
    # build of documentation (-s : strict : fail on warnings)
    - cd doc && mkdocs build -s
  artifacts:
    paths:
      - doc/site
    expire_in: 7 days
  needs: []  # this job has no dependency, will start without waiting for previous stages to complete

.template_test_package:
  stage: package_tests
  image: continuumio/miniconda3:latest
  script:
    # install Xvfb and opengl libraries (needed for test_flint)
    - apt-get update && apt-get -y install xvfb libxi6
    - mv bliss source # to avoid import errors (we want to test the packet, not local bliss folder)
    - conda create -y --name testenv
    - source activate testenv
    - conda install bliss==$CI_COMMIT_TAG --file requirements-test-conda.txt --channel file://${CI_PROJECT_DIR}/conda-local-channel
    - echo ${PYTEST_ARGS}
    - pytest ${PYTEST_ARGS}

test_bliss_package:
  # Run bliss tests using the bliss conda package
  extends: .template_test_package
  only:
    - tags
  tags:
    - bliss_master
  artifacts:
    paths:
      - htmlcov/
    expire_in: 7 days
  variables:
    PYTEST_ARGS: ''

test_writer_package:
  # Run HDF5 writer tests using the bliss conda package
  extends: .template_test_package
  only:
    - tags
  tags:
    - bliss_master
  artifacts:
    paths:
      - htmlcov_writer/
    expire_in: 7 days
  variables:
    PYTEST_ARGS: '-m writer --runwritertests'

pages:
  stage: deploy
  before_script:
    - ''
  tags:
    - conda
    - linux
  script:
    # Preparing
    - git fetch --tags
    - mkdir -p public
    # Make a copy of existing documentation on gitlab webpages
    # Workaround as gitlab does not manage different versions of documentation
    - conda install -y wget
    - sh scripts/ci/gitlab-ci-docs-publish.sh master $(git tag --sort=-creatordate)
    # Publishing documentation for the actual version
    # if we have a tag it will be published under the intranet gitlab page under /tag/ otherwhise under /master/
    - if [[ ( $CI_COMMIT_REF_NAME == master && -z $CI_COMMIT_TAG ) ]]; then export DOC_DIR='master'; else export DOC_DIR=${CI_COMMIT_TAG}; fi
    #- rm -rf public/* # target dir should be cleaned at first time
    - rm -rf public/${DOC_DIR}
    - mkdir -p public/${DOC_DIR}/api/
    - mkdir -p public/${DOC_DIR}/htmlcov/
    - cp -rT doc/site public/${DOC_DIR}/
    - cp -rT build/sphinx/html public/${DOC_DIR}/api/
    - 'cp -rT htmlcov public/${DOC_DIR}/htmlcov/ || :'
  artifacts:
    paths:
      - public
    expire_in: 7 days
  only:
    - tags
    - master
  needs: ['create_reference_doc', 'create_user_doc']

deploy_bliss:
  stage: deploy
  before_script:
    - ''
  tags:
    - conda
    - linux
  script:
    # for tags with 'rc' the package will be published to http://bcu-ci.esrf.fr/stable/
    # for other tags the package will be published to http://bcu-ci.esrf.fr/stable/
    - if [[ $COMMIT_TAG == *rc* ]]; then export BASEDIR='/conda-devel'; else export BASEDIR='/conda'; fi
    - cp -r dist/linux-64/*.tar.bz2 ${BASEDIR}/linux-64/
    - cp -r dist/win-64/*.tar.bz2 ${BASEDIR}/win-64/
    # Updating conda package index metadata
    - conda index ${BASEDIR}
  only:
    - tags
