#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the bliss project
#
# Copyright (c) 2016 Beamline Control Unit, ESRF
# Distributed under the GNU LGPLv3. See LICENSE for more info.

"""
Usage: sps_data_watch [(-s | --session)] <name>...
       sps_data_watch (-h | --help)
Options:
    -s, --session                 Follow data from session(s).
    -h, --help                    Show this screen.
"""
import docopt
import gevent

import json

try:
    from collections import OrderedDict
except ImportError:
    from ordereddict import OrderedDict

try:
    import sps
except ImportError:
    from PyMca import sps

from bliss.data.node import DataNodeIterator,_get_or_create_node

ARRAY_NAME = "SCAN_D"

class _MaxPointReach(Exception):
    pass

class _MaxCounterReach(Exception):
    pass

class _NewCounter(Exception):
    pass

def copy_data(zerod,channel_name,zerod_index,
              session_name,max_nb_counter,max_nb_points):
    data_channel = zerod.get_channel(channel_name)
    previous_cnt_number = len(zerod_index)
    channel_info = zerod_index.setdefault(channel_name,
                                          {'from':0, 'index':len(zerod_index)})
    if len(zerod_index) > max_nb_counter:
        raise _MaxCounterReach()
    elif previous_cnt_number != len(zerod_index):
        raise _NewCounter()

    from_index = channel_info.get('from')
    data = data_channel.get(from_index,-1)
    nb_points = from_index + len(data)
    if nb_points > max_nb_points:
        raise _MaxPointReach()

    channel_info['from'] = nb_points
    if data:
        sps_index = channel_info['index']
        sps_data = sps.getdata(session_name,ARRAY_NAME)
        sps_data.T[sps_index][from_index:from_index+len(data)] = data
        sps.putdata(session_name,ARRAY_NAME,sps_data)

        min_index = nb_points
        for channel_name,channel_info in zerod_index.iteritems():
            point_nb = channel_info.get('from')
            if point_nb < min_index:
                min_index = point_nb

        sps.putinfo(session_name,ARRAY_NAME,json.dumps((min_index,"running")))

def new_scanno(last={"scanno": 0}):
    last["scanno"]+=1
    return last["scanno"]
 
def watch_data(scan_node,session_name):
    npoints = max(scan_node.info_get("npoints"),4096)
    title = scan_node.info_get("title") or "unknown scan"
    nbcounters = 64
    
    scan_data_iterator = DataNodeIterator(scan_node)
    pubsub = scan_data_iterator.children_event_register()

    while True:
        try:
            sps.create(session_name,ARRAY_NAME,npoints,nbcounters)
            zerod_index = OrderedDict()
            for zerod in scan_data_iterator.walk(filter='zerod',wait=False):
                scan_data_iterator.child_register_new_data(zerod,pubsub)
                for channel_name in zerod.channels_name():
                    channel_info = zerod_index.setdefault(channel_name,
                                                          {'from':0, 'index':len(zerod_index)})
                    copy_data(zerod,channel_name,zerod_index,
                              session_name,nbcounters,npoints)

            allcountersdict = dict([(i,"") for i in range(nbcounters)])
            allcountersdict.update(dict(((i,name) for i,name in enumerate(zerod_index))))

            sps.putmetadata(session_name,ARRAY_NAME,
                            json.dumps((allcountersdict,
                                        {"npts":npoints,
                                         "allmotorm": "",
                                         "scanno" : new_scanno(),
                                         "datafile" : "bliss",
                                         "spec": session_name,
                                         "columnnames": zerod_index.keys()+[""]*(nbcounters-len(zerod_index.keys())),
                                         "columns": len(zerod_index.keys()),
                                         "selectedcounters" : ';'.join(zerod_index.keys())},
                                        {})))

            for event_type,zerod in scan_data_iterator.wait_for_event(pubsub,filter='zerod'):
                if event_type is scan_data_iterator.NEW_CHILD_EVENT:
                    scan_data_iterator.child_register_new_data(zerod,pubsub)
                    for channel_name in zerod.channels_name():
                        copy_data(zerod,channel_name,zerod_index,
                                  session_name,nbcounters,npoints)
                elif event_type is scan_data_iterator.NEW_CHANNEL_REGEX:
                    for channel_name in zerod.channels_name():
                        copy_data(zerod,channel_name,zerod_index,
                                  session_name,nbcounters,npoints)
                elif event_type is scan_data_iterator.NEW_DATA_IN_CHANNEL_EVENT:
                    zerod,channel_name = zerod
                    copy_data(zerod,channel_name,zerod_index,
                              session_name,nbcounters,npoints)
        except _MaxCounterReach:
            nbcounters *= 2
        except _MaxPointReach:
            if npoints < 10000:
                npoints *= 32
            else:
                npoints *= 2
        except _NewCounter:
            pass
        
def watch_session(session_name):
    session_node = _get_or_create_node(session_name,node_type='session')
    if session_node is not None:
        data_iterator = DataNodeIterator(session_node)
        pubsub = data_iterator.children_event_register()
        last_scan_node = None
        for last_scan_node in data_iterator.walk(filter='scan',wait=False):
            pass
        watch_data_task = None
        if last_scan_node is not None:
            watch_data_task = gevent.spawn(watch_data,last_scan_node,session_name)
        for event_type,scan_node in data_iterator.wait_for_event(pubsub,filter='scan'):
            if watch_data_task:
                watch_data_task.kill()
            watch_data_task = gevent.spawn(watch_data,scan_node,session_name)
        
def main():
    try:
        # Parse arguments, use file docstring as a parameter definition
        arguments = docopt.docopt(__doc__)
        sessions_name = arguments['<name>']
    except docopt.DocoptExit as e:
        print e.message
    else:
        tasks = list()
        for session in sessions_name:
            tasks.append(gevent.spawn(watch_session,session))
        try:
            gevent.joinall(tasks)
        except KeyboardInterrupt:
            pass
if __name__ == '__main__':
   main()
