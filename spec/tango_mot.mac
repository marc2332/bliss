#%TITLE% tango_mot.mac
#%NAME%
#  TANGO_MOT.MAC
#%CATEGORY%
# motion macro-motor tango
#%DESCRIPTION% tango_mot macros allow to configure a SPEC hardware
# macro-motor to be used to interface a tango motor device server.
#%EXAMPLE%
#%DL%
#%SETUP%
#  All configuration is done in spec config.
#%UL%
#%LI%
#%XUL%

# Configuration example:
# Controller :

## Motor and Counter Device Configuration (Not CAMAC)
##
## MOTORS   DEVICE                   ADDR  <>MODE  NUM           <>TYPE
##    YES   tango_mot    idXX/bliss/exp            1     Macro Motors
##     NO

# Axis :

## Number: <>Controller        0:    NONE   1: MAC_MOT
## Unit/[Module/]Channel                           0/0
## Name                             dummy          fdc
## Mnemonic                         dummy          fdc

# To select axis: use custom parameter "axis_name"

# To choose to use spec configuration parameters: set "use_spec_config" to 1

## Custom Parameters for Motor "ma" (ma)               2/2 configured
##
## NAME                      VALUE
## axis_name                 roba
## use_spec_config           1



######################################################################
######################################################################
######################################################################
###########################                ###########################
###########################  Macro motors  ###########################
###########################                ###########################
######################################################################
######################################################################
######################################################################

need spec_utils
need hg

# Messages styles configuration.
hg_config_style("tango_mot",  1, 0, 3)
hg_config_indent("tango_mot", 0, 0, 0)
hg_config_headers("tango_mot", "TANGO_MOT", "TANGO_MOT", "TANGO_MOT")
hg_generate("tango_mot")


def bliss_get_axes() '{
    local TTT[]

    tango_io("id26/bliss/cyrtest", "GetAxisList", TTT)

}'


def bliss_get_custom_commands(mot_name) '{

    local ccList[]

    tango_io(motor_par(mot_name, "dev_name"), "GetCustomCommandList", ccList)

    local _fct_name _cmd_string _tin _tout   _reste _length

    printf("-------- custom commands for %s --------\n", mot_name)
    for (ii in ccList) {
        _cmd_string = ccList[ii]

        # example :
        # ["custom_set_measured_noise", ["float", "None"]]

        _length = length(_cmd_string)
        _fct_name = substr(_cmd_string, 3, index(_cmd_string, ",")-4)
        # _fct_name = custom_set_measured_noise
        # print _fct_name

        _fct_length = index(_cmd_string, ",")+2
        _reste = substr(_cmd_string, _fct_length  , _length-_fct_length )
        # _reste = ["custom_set_measured_noise", ["float", "None"]]
        # print _reste

        local uuu[]
        split(_reste, uuu, ", ")
        _tin = string_remove_last_N_chars(substr(uuu[0], 3), 1)
        _tout = string_remove_last_N_chars(substr(uuu[1], 2), 2)

        printf("%s(%s) --> %s \n", _fct_name, _tin, _tout)

    }
}'


def bliss_put_traj() '{

    float array tp[5][100]

    array_op("fill", tp, 1,2)
    tango_put("id26/bliss_cyrtest/roba/trajpar", tp)

#36.CYRIL> p motor_par("roba", "dev_name")
#id26/bliss_cyrtest/roba

}'


def econfig '{
    local _nb_param  _device_name  _axis_name

    _nb_param = $#

    _axis_name = "$1"
    _device_name = motor_par(_axis_name, "dev_name")

    if (_nb_param == 2 && ("$2" == "expert")){
        printf("Launching expert GUI for Bliss axis \"%s\" (device=\"%s\")\n", _axis_name,  _device_name)
        _cmd = sprintf("/users/blissadm/bin/atkpanel -expert %s  >/dev/null 2>&1 &", _device_name)
    }
    else{
        printf("Launching GUI for Bliss axis \"%s\" (device=\"%s\")\n", _axis_name,  _device_name)
        _cmd = sprintf("/users/blissadm/bin/atkpanel %s  >/dev/null 2>&1 & ", _device_name)
    }

    unix(_cmd)
}'

def eeconfig '{
    econfig "$1" "expert"
}'



#%IU%
#%MDESC%
#    Called on reconfig.
def tango_mot_config(motnum, type, unit, module, channel) '{

    if((motnum == "..") && (type == "ctrl")) {

        # Checks controller DS field.
        if (tango_mot_ADDR ==""){
            tango_mot_err( "config : tango_mot_ADDR is empty ?")
            return ".error."
        }

        # Checks that Tango DS is running
        if(!ds_is_responsive(tango_mot_ADDR)) {
            tango_mot_err(sprintf("%s unresponsive -> disabling motor controller.", \
                                  tango_mot_ADDR))
            return ".error."
        }
        else{
            tango_mot_msg(sprintf("EMotion Controller %s is responding", tango_mot_ADDR))
        }
        return
    }

    if(type == "mot") {
        local _mot_mne  _ctrl_ds_name  _axis_ds_name  _axis_name
        local TTT[]  _msg

        _mot_mne = motor_mne(motnum)

        # Builds axis DS name from controller DS name.
        # ex : id26/bliss/cyrtest -> id26/bliss_cyrtest/roba
        _ctrl_ds_name = tango_mot_ADDR
        tango_mot_dbg(sprintf("CTRL DS NAME = %s", _ctrl_ds_name))

        _axis_name = motor_par(motnum, "axis_name")

        if (_axis_name == 0){
            _axis_name = _mot_mne
            _msg = sprintf("motor %d : parameter \"axis_name\" is empty (will use mnemonic : %s).", \
                           motnum, _mot_mne )
            tango_mot_msg(_msg)
        }
        else{
            tango_mot_dbg(sprintf("axis_name = %s", _axis_name))
        }


        if (split(_ctrl_ds_name, TTT, "/") == 3){
            _axis_ds_name = sprintf("%s/bliss_%s/%s", TTT[0], TTT[2], _axis_name)
            tango_mot_dbg(sprintf("AXIS DS NAME = %s", _axis_ds_name))
        }
        else{
            tango_mot_err(sprintf("wrong Tango DS name in ADDR field ?", tango_mot_ADDR ))
            return ".error."
        }


        if (ds_is_responsive(_axis_ds_name)){
            tango_mot_msg(sprintf("Motor %s linked to DS : %s ", _mot_mne, _axis_ds_name))
        }
        else{
            tango_mot_err(sprintf("Axis %s is not responding", _axis_ds_name))
            return ".error."
        }

        # Registers axis Tango DS name in parameters of the motor.
        tango_mot_dbg(sprintf("Registering DS name : \"%s\" for motor \"%s\"", \
                             _axis_ds_name, _mot_mne))

        # Cannot use tango_mot_ADDR here directly...
        motor_par(motnum, "dev_name", _axis_ds_name, "add")

        # STEPS PER UNIT
        # The step_size SPEC value is only used to define the
        # granularity of the movement. We do not use it to convert
        # movements.
        local _steps_per_unit
        _steps_per_unit = motor_par(motnum, "step_size")

        # VELOCITY / ACCELERATION
        local _velo _velo_steps _use_spec_config
        local _acc _acc_time _acc_time_ms

        # 2 modes for acceleration / velocity
        # use_spec_config = 0 (default) : values are read from DS and set to spec internals
        # use_spec_config = 1 : use values from spec config and write it to DS
        # use_spec_config can be added in optionnal motor parameters in config

        _use_spec_config = motor_par(motnum, "use_spec_config")
        tango_mot_dbg(sprintf("Use %s values for velocity/acceleration ", _use_spec_config?"SPEC":"SERVER"))

        if (_use_spec_config == 1) {
            # Writes SPEC config values to the server.

            tango_mot_msg(sprintf("Motor %s uses acc/velocity from spec config", _mot_mne))

            _velo_steps = motor_par(motnum, "velocity")
            tango_mot_dbg(sprintf("set velocity to : %g steps/s", _velo_steps))
            tango_mot_par(motnum, "velocity", "set", _velo_steps)

            _acc_time_ms = motor_par(motnum, "acceleration")
            tango_mot_dbg(sprintf("set acceleration to : %g ms", _acc_time_ms))
            tango_mot_par(motnum, "acceleration", "set", _acc_time_ms)

        }
        else {
            # We only need to set spec internals (no write to DS)

            tango_mot_dbg("----------------configurin SPEC from DS values---------------")

            # To inform macro func tango_mot_par to not set acc/velo
            # to DS we use this custom [in_config] motor_par flag
            motor_par(motnum, "in_config", 1, "add")

            # Read _steps_per_unit from SPEC config to be able to deal
            # with spec units which are steps-oriented...
            _steps_per_unit = motor_par(motnum, "step_size")

            # Reads "velocity" from server and set SPEC internal
            # "velocity" (different from "config_velocity").
            _velo = tango_mot_get_attr(motnum, "velocity")
            _velo_steps = _velo * _steps_per_unit
            tango_mot_dbg(sprintf("DS velocity=%g  SSS=%g _velo_steps=%g ", _velo, _steps_per_unit, _velo_steps))
            motor_par(motnum, "velocity", _velo_steps)

            # Reads "acctime" from server and sets spec internal
            # "acceleration" value.
            _acc_time = tango_mot_get_attr(motnum, "acctime")
            _acc_time_ms = _acc_time * 1000
            tango_mot_dbg(sprintf("DS acc_time=%g  _acc_time_ms=%g ", _acc, _acc_time_ms))
            motor_par(motnum, "acceleration", _acc_time_ms)

            # Reset custom [in_config] flag, so motor_par set by user
            # works fine.
            motor_par(motnum, "in_config", 0)
        }

    }
}'


#%IU% (motnum, key, action, p1, p2)
#%MDESC%
#    The hmacmot_par function is called when various motor parameters
# are set and when the motor_par() function is used to retrieve a
# user-defined parameter.
# * <motnum> : motor number
# * <key>    : parameter name
# * <action> : "set" / "get"
# * <p1>     :
# * <p2>     :
def tango_mot_par(motnum, key, action, p1, p2) '{
    local _msg _mot_mne

    _mot_mne = motor_mne(motnum)

    _msg = sprintf ("---tango_mot_par(motnum=%s key=\"%s\", action=\"%s\", p1=\"%s\", p2=\"%s\")", \
                    motnum, key, action, p1, p2)
    tango_mot_dbg(_msg)

    if (action=="get") {

        if (key == "acceleration"){
            print "OHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH acc"
        }
        else if (key == "slew_rate" || key == "velocity") {
            print "OHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH velocity"
        }
        else if ( key == "step_size"){
            print "OHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH step_size"
        }
    }
    else if (action == "set"){

        if (key == "acceleration"){
            # Writes both Acceleration AND Acceleration time ...

            if (motor_par(motnum, "in_config") == 1) {
                tango_mot_dbg("set acc_time and acceleration : no write to DS while in_config")
                return
            }
            else{
                tango_mot_dbg("set SPEC acceleration (ms) to DS acceleration (uu/s2)")

                local _acc  _attr _acc_time  _acc_time_ms  _velocity

                # re-read "velocity" from DS
                _velocity = tango_mot_get_attr(motnum, "velocity")

                _attr =  "acceleration"
                _acc_time_ms  = p1
                _acc_time = _acc_time_ms / 1000

                if (_acc_time == 0){
                    tango_mot_err("_acc_time ==0")
                }
                else{
                    _acc = _velocity / _acc_time
                }

                # Writes "acceleration" in DS
                tango_mot_dbg(sprintf("_velocity=%g  _acc_time=%g  _acc=%g ", _velocity, _acc_time, _acc))
                tango_mot_set_attr(motnum, "acceleration", _acc)

                # Writes "acctime" in DS
                tango_mot_dbg("set SPEC acceleration (ms) to DS acc_time (s)")
                tango_mot_set_attr(motnum, "acctime", _acc_time)
            }
        }
        else if (key == "slew_rate" || key == "velocity") {

            if (motor_par(motnum, "in_config") == 1) {
                tango_mot_dbg("set velocity : no write to DS while in_config")
                return
            }
            else{

                tango_mot_dbg("set SPEC velocity (steps/s) to DS velocity (uu/s)")

                local _attr  _velocity_in_steps  _steps_per_unit  _velo

                _attr =  "velocity"
                _velocity_in_steps  = p1
                _steps_per_unit = motor_par(motnum, "step_size")

                if (_steps_per_unit == 0){
                    tango_mot_err("_steps_per_unit == 0")
                }
                else{
                    _velo = _velocity_in_steps / fabs(_steps_per_unit)
                }

                # Writes "velocity" into ds.
                tango_mot_dbg(sprintf("_velocity_in_steps=%g  _steps_per_unit=%g  _velo=%g", \
                                      _velocity_in_steps, _steps_per_unit, _velo))
                tango_mot_set_attr(motnum, "velocity", _velo)
            }
        }
    }
    else{
        tango_mot_dbg(sprintf ("tango_mot_par()--action \"%s\" is not recognized. (key=%s) ", action, key))
    }
}'


#%IU%
#%MDESC%
#
def tango_mot_cmd(motnum, cmd, p1, p2) '{

    local _mot_mne  _dev  _attr  _step_size  _steps  _cmd

    _mot_mne = motor_mne(motnum)

    tango_mot_dbg(sprintf ("tango_mot_cmd(motnum=%s cmd=%s p1=%s p2=%s)", motnum, cmd, p1, p2))

    if(motnum == ".."){
        # <cmd> command applying to all motors.
    }
    else{
        # <cmd> command applies to individual motor.

        _dev = motor_par(motnum, "dev_name")

        # "position" must return dial position in prefered units( ex :
        # deg, mm, um)
        # parameters: none
        if (cmd == "position") {
            local _pos

            _attr =  "position"
            _pos = tango_get(_dev, _attr)
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }

            _step_size = motor_par(motnum, "step_size")
            _steps = _pos * _step_size
            tango_mot_dbg(sprintf( "cmd=position mot=%s pos=%s  ss=%s steps=%s", _mot_mne, _pos , _step_size, _steps))

            return (_pos)
        }

        # "get_status" called during the motion, must return a bit mask
        # bits meaning: 0 if motor idle
        #               2 if motor moving
        #               4 if negative limit on
        #               8 if positive limit on
        if (cmd == "get_status"){
            local _state  _ret  _cmd

            _cmd = "State"
            _state = tango_io(_dev, _cmd)
            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }

            tango_mot_dbg(sprintf( "tango_mot_cmd get_status State=%s  (%s)" , _state, tango_state_to_str(_state)))

            # tango_state : -1   "FAULT"
            # tango_state : 0    "ON"
            # tango_state : 1    "OFF"
            # tango_state : 2    "CLOSED"  (or CLOSE?)
            # tango_state : 3    "OPEN"
            # tango_state : 4    "INSERT"
            # tango_state : 5    "EXTRACT"
            # tango_state : 6    "MOVING"
            # tango_state : 7    "STANDBY"
            # tango_state : 8    "FAULT"
            # tango_state : 9    "INIT"
            # tango_state : 10   "RUNNING"
            # tango_state : 11   "ALARM"
            # tango_state : 12   "DISABLED" (or DISABLE?)
            # tango_state : 13   "UNKNOWN"

            # MOVING
            if (_state == 6) {
                _ret |= 2
                return _ret
            }

            # FAULT
# ???       # PC: problem with SyncAxis, acceleration is wrong; causes Fault State while moving
# ???       # We do not care; this is anyway a provisional solution
#            if (_state == 8) {
#                _ret |= 2
#                return _ret
#            }

            return 0
        }

        #-------------------------------------
        # "start_one"
        # parameters: p2 is relative motion, p1 is absolute requested position
        if (cmd == "start_one") {

            _attr = "position"
            tango_put(_dev, _attr, p1)

            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _attr)
                exit
            }
        }

        #-------------------------------------
        # "set_position" called on "set_dial motor newpos"
        # parameters: p1 is the new position
        #
        # PC: this does not change the dial value, it will move to position p1
        # We don not want set_dial to be used on Tango motors
        if (cmd == "set_position") {
            tango_mot_err("Changing dial value is not allowed")
        }

        # "abort_one" called on <Ctrl-C>
        if (cmd == "abort_one") {
            _cmd = "Abort"
            tango_io(_dev, _cmd)

            if (TANGO_ERR){
                _tango_mot_error_stack(_mot_mne, _dev, _cmd)
                exit
            }
        }
    }
}'



######################################################################
#####################                            #####################
#####################   TANGO ATTRIBUTES ACCESS  #####################
#####################                            #####################
######################################################################

# Macros to read/write Tango attributes with tango errror management.

def tango_mot_get_attr(motnum, attr_name) '{
    local _attr_val _dev _mot_mne
    _dev = motor_par (motnum, "dev_name")
    _mot_mne = motor_mne(motnum)

    _attr_val = tango_get(_dev, attr_name)
    if (TANGO_ERR){
        _tango_mot_error_stack(_mot_mne, _dev, attr_name)
        exit
    }
    return _attr_val
}'

def tango_mot_set_attr(motnum, attr_name, attr_value) '{
    local _dev _mot_mne
    _dev = motor_par (motnum, "dev_name")
    _mot_mne = motor_mne(motnum)

    tango_put(_dev, attr_name, attr_value)
    if (TANGO_ERR){
        _tango_mot_error_stack(_mot_mne, _dev, attr_name)
        exit
    }
}'

def _tango_mot_error_stack(motmne, devname, attr_cmd) '{
    tty_cntl("md")
    print "\n TANGO_MOT_ERROR " motmne " " devname  "/"  attr_cmd
    printf ("TANGO_ERR_MSG = \"%s\" \n\n", TANGO_ERR)
    print TANGO_ERR_STACK
    tty_cntl("me")
}'



#%MACROS%
#%IMACROS%
#%AUTHOR%  Cyril Guilloud - BLISS - 2014

