#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# This file is part of the bliss project
#
# Copyright (c) 2016 Beamline Control Unit, ESRF
# Distributed under the GNU LGPLv3. See LICENSE for more info.
"""
Usage: flint [(-s | --session)] <name>...
       flint (-h | --help)
Options:
    -s, --session                 Follow data from session(s).
    -h, --help                    Show this screen.
"""
import docopt
from silx.gui.plot.PlotWindow import Plot1D
from silx.gui import qt
from PyQt4.QtCore import pyqtRemoveInputHook
from bliss.data.node import DataNodeIterator, _get_or_create_node, is_zerod
import numpy
import gevent
import sys
import weakref

from bliss.common.utils import OrderedDict

pyqtRemoveInputHook()

def run_gevent():
  try:
      gevent.wait(timeout=0.01)
  except KeyboardInterrupt:
      sys.exit(1)

qapp = qt.QApplication([])

events_processing = qt.QTimer()
events_processing.setInterval(10)
events_processing.timeout.connect(run_gevent)
events_processing.start()

PLOTS = dict()
PLOT_DATA = dict()
AXIS_INFO = dict()

def _update(data, axis_info, plot):
    x_data = data.get(axis_info["x"],[])
    for y_axis in axis_info["y"]:
        y_data = data.get(y_axis, [])
        if len(x_data) == len(y_data):
            plot.addCurve(x_data, y_data, legend='%s / %s' % (y_axis, axis_info['x']))

class AxesDockWidget(qt.QDockWidget):
    def __init__(self, parent=None, plot=None):
        assert plot is not None
        self._plotRef = weakref.ref(plot)
        self._isConnected = False  # True if widget connected to plot signals

        super(AxesDockWidget, self).__init__("Axes selection", parent)

        self.layout().setContentsMargins(0, 0, 0, 0)
        self.makeWidget()

        self.visibilityChanged.connect(self._visibilityChangedHandler)

    @property
    def plot(self):
        return self._plotRef()

    def makeWidget(self):
        self._widget = qt.QWidget(self)
        qt.QGridLayout(self._widget)
        self.setWidget(self._widget)

    def checkboxStateChanged(self,state):
        self.axis_info["x"]=None
        self.axis_info["y"]=[]
        for axis, checkbox in self.x_checkboxes.iteritems():
          if checkbox.isChecked():
            self.axis_info["x"] = axis
            break
        for axis, checkbox in self.y_checkboxes.iteritems():
          if checkbox.isChecked():
            self.axis_info["y"].append(axis)
        self.plot.clear()
        data = PLOT_DATA[self.plot._scan_node]
        _update(data, self.axis_info, self.plot)

    def setAxisInfo(self, axis_info):
        self.axis_info = axis_info
        self.x_checkboxes = {}
        self.y_checkboxes = {}

        self._widget.close()
        self.makeWidget()

        grpx = qt.QButtonGroup(self._widget)
        grpy = qt.QButtonGroup(self._widget)
        grpy.setExclusive(False)
        self._widget.layout().addWidget(qt.QLabel("label", self), 0, 0)
        self._widget.layout().addWidget(qt.QLabel("x", self), 0, 1)
        self._widget.layout().addWidget(qt.QLabel("y", self), 0, 2)
        for i, axis in enumerate(axis_info.get("__all__", [])):
            self._widget.layout().addWidget(qt.QLabel(axis, self), i+1, 0)
            chk_x = qt.QCheckBox(self._widget)
            grpx.addButton(chk_x)
            chk_x.setChecked(axis_info["x"] == axis)
            self.x_checkboxes[axis] = chk_x
            chk_x.stateChanged.connect(self.checkboxStateChanged)
            self._widget.layout().addWidget(chk_x, i+1, 1)
            chk_y = qt.QCheckBox(self._widget)
            grpy.addButton(chk_y)
            chk_y.setChecked(axis in axis_info["y"])
            self.y_checkboxes[axis] = chk_y
            chk_y.stateChanged.connect(self.checkboxStateChanged)
            self._widget.layout().addWidget(chk_y, i+1, 2)

    def updateAxes(self, *args):
        axis_info = AXIS_INFO[self.plot._scan_node]
        self.setAxisInfo(axis_info)

    def _visibilityChangedHandler(self, visible):
        if visible:
            self.updateAxes()
            if not self._isConnected:
                self.plot.sigContentChanged.connect(self.updateAxes)
                self.plot.sigActiveCurveChanged.connect(self.updateAxes)
                self._isConnected = True
        else:
            if self._isConnected:
                self.plot.sigContentChanged.disconnect(self.updateAxes)
                self.plot.sigActiveCurveChanged.disconnect(self.updateAxes)
                self._isConnected = False

    def showEvent(self, event):
        """Make sure this widget is raised when it is shown
        (when it is first created as a tab in PlotWindow or when it is shown
        again after hiding).
        """
        self.raise_()

def update_plot(scan_node):
    plot = PLOTS[scan_node]
    plot._scan_node = scan_node
    data = PLOT_DATA[scan_node]
    
    axes_list = data.keys()
    try:
      axis_info = AXIS_INFO.setdefault(scan_node, {"x": axes_list[0], "y": [axes_list[1]] })
    except IndexError:
      return

    axis_info["__all__"] = axes_list[:]

    _update(data, axis_info, plot)

def copy_data(scan_node,zerod,zerod_index):
    channel_name = zerod.name
    data_channel = zerod
    from_index = zerod_index.get(channel_name,0)
    data = data_channel.get(from_index,-1)
    zerod_index[channel_name] = from_index + len(data)
    if data:
        channel_data = PLOT_DATA.setdefault(scan_node, {}).setdefault(channel_name, [])
        channel_data.extend(data)
        update_plot(scan_node)

def watch_data(scan_node, mdi_area):
    plot_window = Plot1D()
    PLOTS[scan_node] = plot_window
    mdi_area.addSubWindow(plot_window)
    controlMenu = plot_window.controlButton.menu()
    def add_axes_selection(menu=controlMenu, plot_window=plot_window):
        axes_widget = AxesDockWidget(plot_window, plot_window)
        axes_widget.hide()
        plot_window.addTabbedDockWidget(axes_widget)
        menu.addAction(axes_widget.toggleViewAction())
    controlMenu.aboutToShow.connect(add_axes_selection)

    plot_window.show()

    zerod_index = dict()

    scan_data_iterator = DataNodeIterator(scan_node)
    for event_type, event_data in scan_data_iterator.walk_events(filter="channel"):
        if not is_zerod(event_data):
            continue
        zerod = event_data
        if event_type in (scan_data_iterator.NEW_CHILD_EVENT,
                          scan_data_iterator.NEW_DATA_IN_CHANNEL_EVENT):
            copy_data(scan_node, zerod, zerod_index)
    
def watch_session(session_name, mdi):
    session_node = _get_or_create_node(session_name, node_type='session')
    if session_node is not None:
        data_iterator = DataNodeIterator(session_node)

        watch_data_task = None
        for scan_node in data_iterator.walk_from_last(filter='scan'):
            if watch_data_task:
                watch_data_task.kill()
            watch_data_task = gevent.spawn(watch_data, scan_node, mdi)

def main():
    try:
        # Parse arguments, use file docstring as a parameter definition
        arguments = docopt.docopt(__doc__)
        sessions_name = arguments['<name>']
    except docopt.DocoptExit as e:
        print e.message
    else:
        win = qt.QMainWindow()
        mdi_area = qt.QMdiArea(win)
        win.setCentralWidget(mdi_area)
        win.show()
        
        tasks = list()
        for session in sessions_name:
            tasks.append(gevent.spawn(watch_session, session, mdi_area))
  
        qapp.exec_()

if __name__ == '__main__':
   main()



