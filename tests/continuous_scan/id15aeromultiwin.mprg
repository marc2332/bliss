//***************************************************************************
//***************************************************************************
//
//        Return value: number of points that has been stored. There are
//                      several ways to get this value.
//                      a) "?RETCODE" -> returns the number of points
//                         stored. Returns null if program is "ABORT"ed.
//                      b) "?VAR NPOINTS" -> returns the number of points
//                         that is actually stored (even after an "ABORT").
//
// INPUT VARIABLES FOR THE ID15AERO PROGRAM  (to be initialised by the host)
//
// SCANCH:   1==CH1, 2==CH2,... (AEROX Rot, CH3; AEROY Tr, CH5)
// E1:     Initial encoder position
// DIR:    Movement direction: 1 (Positive), -1 (Negative)
// PATW:   Pattern width (enc. units)
// PATWF:  Pattern width fractional part (31-bit wide)
// NPAT:   Number of patterns
// UPW:    Width of pulse UP   (enc. units)
// DOWNW:  Width of pulse DOWN (enc. units)
// NPULSE: Number of pulses in a pattern
//
//       E1               --> DIR                E2
//       *===|===|===|===|===|===|===|===|===|===*
//           |<->|                              
//            PATW
//          ____          ____          ____               ____
//       __|    |________|    |________|    |_____________|    |__
//       ->|    |<-- UPW        
//         |  ->|        |<-- DOWNW
//       ->|                                              |<-- PATW
//
// Interval E1-E2: aerox at constant speed
//       E2 = E1 + DIR * NPAT * PATW
//
// Notes:
//
// 1- The program assumes that the real start position is before E1 in
//    the scan direction, corresponding to the acceleration segment.
//    So the first operation is to wait crossing the start position E1.
//    Thus, the program will block if such expected event does not arrive.
//
// 2- The fractional part of the pattern width is used to reduce the effect
//    of the rounding errors when the number of patterns is high
//
// HARDWARE SETUP
//    1. 'aerox/y' encoder on MUSST channel 3/5
//    2. Camera trigger signal on MUSST Trig Out B Lemo00 connector
//
//***************************************************************************

// INPUT VARIABLES FOR THE ID15AERO PROGRAM
UNSIGNED SCANCH
SIGNED E1
SIGNED DIR
UNSIGNED PATW
UNSIGNED PATWF
UNSIGNED NPAT
UNSIGNED UPW
UNSIGNED DOWNW
UNSIGNED NPULSE

// AUXILIARY VARIABLES FOR THE ID15AERO PROGRAM
SIGNED ETG
SIGNED NEWTG
SIGNED PATWTEMP
SIGNED PATFACC
SIGNED PATFCORR
SIGNED NPFCORR
SIGNED UPWTEMP
SIGNED DOWNWTEMP
UNSIGNED I
UNSIGNED PATDONE

// RETURN VALUE VARIABLE FOR THE ID15AERO PROGRAM 
UNSIGNED NPOINTS

// PROGRAM ALIASES 
ALIAS CH1 = CH1
ALIAS CH2 = CH2
ALIAS CH3 = CH3
ALIAS CH4 = CH4
ALIAS CH5 = CH5
ALIAS CH6 = CH6
ALIAS SHUTTER  = IO8 

//***************************************************************************

PROG ID15MULTIWINDOWS 

   // --- Reset camera trigger signal 
   BTRIG 0
   DOACTION OUT !SHUTTER
    
   GOSUB INIT

   ETG = E1

   DOACTION OUT SHUTTER

// --- Main program loop 
LOOP:
   GOSUB SET_ETG
   AT DEFEVENT DO NOTHING

   NEWTG = ETG
   
   FOR I FROM 1 TO NPULSE
      DOACTION STORE ATRIG BTRIG
      NEWTG += UPWTEMP
      GOSUB SET_NEWTG
      AT DEFEVENT DO BTRIG

      NEWTG += DOWNWTEMP
      GOSUB SET_NEWTG
      AT DEFEVENT DO NOTHING

      NPOINTS += 1
   ENDFOR

   // New target
   PATDONE += 1
   IF (PATDONE == NPAT) THEN
      BTRIG 0
      DOACTION OUT !SHUTTER
      EXIT NPOINTS
   ENDIF

   ETG += PATWTEMP
   PATFACC += PATWF
   IF ((PATFACC & 0x80000000) != 0) THEN   
      PATFACC &= 0x7FFFFFFF
      ETG += PATFCORR
      NPFCORR += 1
   ENDIF

   GOTO LOOP
    
ENDPROG

SUB INIT
    // --- Stop timer
    CTSTOP TIMER

    // --- Initialise timer and vars
    NPOINTS = 0
    PATDONE = 0
    TIMER   = 0
    PATFACC = 0
    NPFCORR = 0

    // --- Set data pointer to the first position of buffer 
    EMEM 0 AT 0

    // --- Start timer and counter on first event
    CTSTART ONEVENT TIMER

    // --- Define the values that will be stored and the default event source
    // --- Set movement direction (UP or DOWN)
    IF (DIR > 0) THEN
        PATWTEMP  = PATW
        PATFCORR  = 1
        UPWTEMP   = UPW
        DOWNWTEMP = DOWNW
        IF (SCANCH == 1) THEN
            STORELIST TIMER CH1
            DEFEVENT CH1
            EVSOURCE CH1 UP
        ELSEIF (SCANCH == 2) THEN
            STORELIST TIMER CH2
            DEFEVENT CH2
            EVSOURCE CH2 UP
        ELSEIF (SCANCH == 3) THEN
            STORELIST TIMER CH3
            DEFEVENT CH3
            EVSOURCE CH3 UP
        ELSEIF (SCANCH == 4) THEN
            STORELIST TIMER CH4
            DEFEVENT CH4
            EVSOURCE CH4 UP
        ELSEIF (SCANCH == 6) THEN
            STORELIST TIMER CH6
            DEFEVENT CH6
            EVSOURCE CH6 UP
        ELSE //previous default was chan 5
            STORELIST TIMER CH5
            DEFEVENT CH5
            EVSOURCE CH5 UP
        ENDIF
    ELSE
        PATWTEMP  = -PATW
        PATFCORR  = -1
        UPWTEMP   = -UPW
        DOWNWTEMP = -DOWNW
        IF (SCANCH == 1) THEN
            STORELIST TIMER CH1
            DEFEVENT CH1
            EVSOURCE CH1 DOWN
        ELSEIF (SCANCH == 2) THEN
            STORELIST TIMER CH2
            DEFEVENT CH2
            EVSOURCE CH2 DOWN
        ELSEIF (SCANCH == 3) THEN
            STORELIST TIMER CH3
            DEFEVENT CH3
            EVSOURCE CH3 DOWN
        ELSEIF (SCANCH == 4) THEN
            STORELIST TIMER CH4
            DEFEVENT CH4
            EVSOURCE CH4 DOWN
        ELSEIF (SCANCH == 6) THEN
            STORELIST TIMER CH6
            DEFEVENT CH6 
            EVSOURCE CH6 DOWN
        ELSE //previous default was chan 5
            STORELIST TIMER CH5
            DEFEVENT CH5 
            EVSOURCE CH5 DOWN
        ENDIF
    ENDIF
ENDSUB

SUB SET_ETG
    IF (SCANCH == 1) THEN
        @CH1 = ETG
    ELSEIF (SCANCH == 2) THEN
        @CH2 = ETG
    ELSEIF (SCANCH == 3) THEN
        @CH3 = ETG
    ELSEIF (SCANCH == 4) THEN
        @CH4 = ETG
    ELSEIF (SCANCH == 6) THEN
        @CH6 = ETG
    ELSE
        @CH5 = ETG
    ENDIF
    #NOP
ENDSUB

SUB SET_NEWTG
    IF (SCANCH == 1) THEN
        @CH1 = NEWTG
    ELSEIF (SCANCH == 2) THEN
        @CH2 = NEWTG
    ELSEIF (SCANCH == 3) THEN
        @CH3 = NEWTG
    ELSEIF (SCANCH == 4) THEN
        @CH4 = NEWTG
    ELSEIF (SCANCH == 6) THEN
        @CH6 = NEWTG
    ELSE
        @CH5 = NEWTG
    ENDIF
    #NOP
ENDSUB
